export { base64_variants, to_string } from './libsodium-js-utils';
import type { KeyPair, StringKeyPair, StringOutputFormat, Uint8ArrayOutputFormat } from 'libsodium-wrappers';
import { base64_variants } from './libsodium-js-utils';
declare global {
    var jsi_crypto_auth_BYTES: number;
    var jsi_crypto_auth_KEYBYTES: number;
    var jsi_crypto_secretbox_KEYBYTES: number;
    var jsi_crypto_secretbox_NONCEBYTES: number;
    var jsi_crypto_box_PUBLICKEYBYTES: number;
    var jsi_crypto_box_SECRETKEYBYTES: number;
    var jsi_crypto_box_NONCEBYTES: number;
    var jsi_crypto_box_SEEDBYTES: number;
    var jsi_crypto_aead_xchacha20poly1305_ietf_KEYBYTES: number;
    var jsi_crypto_aead_xchacha20poly1305_ietf_NPUBBYTES: number;
    var jsi_crypto_kdf_KEYBYTES: number;
    var jsi_crypto_kdf_CONTEXTBYTES: number;
    var jsi_crypto_generichash_BYTES: number;
    var jsi_crypto_generichash_BYTES_MIN: number;
    var jsi_crypto_generichash_BYTES_MAX: number;
    var jsi_crypto_generichash_KEYBYTES: number;
    var jsi_crypto_generichash_KEYBYTES_MIN: number;
    var jsi_crypto_generichash_KEYBYTES_MAX: number;
    var jsi_crypto_sign_SEEDBYTES: number;
    var jsi_crypto_pwhash_SALTBYTES: number;
    var jsi_crypto_pwhash_ALG_DEFAULT: number;
    var jsi_crypto_pwhash_OPSLIMIT_INTERACTIVE: number;
    var jsi_crypto_pwhash_MEMLIMIT_INTERACTIVE: number;
    var jsi_crypto_pwhash_BYTES_MIN: number;
    var jsi_crypto_pwhash_BYTES_MAX: number;
    var jsi_crypto_kdf_hkdf_sha256_BYTES_MAX: number;
    var jsi_crypto_kdf_hkdf_sha256_BYTES_MIN: number;
    var jsi_crypto_kdf_hkdf_sha256_KEYBYTES: number;
    function jsi_crypto_auth(message: string | ArrayBuffer, key: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_auth_verify(tag: ArrayBuffer, message: string | ArrayBuffer, key: ArrayBuffer): boolean;
    function jsi_crypto_auth_keygen(): ArrayBuffer;
    function jsi_from_base64_to_arraybuffer(input: string, variant?: base64_variants): ArrayBuffer;
    function jsi_to_base64(input: string | ArrayBuffer, variant: base64_variants): string;
    function jsi_to_hex(input: string | ArrayBuffer): string;
    function jsi_randombytes_buf(length: number): ArrayBuffer;
    function jsi_randombytes_uniform(upper_bound: number): number;
    function jsi_crypto_secretbox_keygen(): ArrayBuffer;
    function jsi_crypto_aead_xchacha20poly1305_ietf_keygen(): ArrayBuffer;
    function jsi_crypto_kdf_keygen(): ArrayBuffer;
    function jsi_crypto_box_keypair(): {
        publicKey: ArrayBuffer;
        secretKey: ArrayBuffer;
    };
    function jsi_crypto_box_seed_keypair(seed: ArrayBuffer): {
        publicKey: ArrayBuffer;
        secretKey: ArrayBuffer;
    };
    function jsi_crypto_sign_keypair(): {
        publicKey: ArrayBuffer;
        secretKey: ArrayBuffer;
    };
    function jsi_crypto_sign_seed_keypair(seed: ArrayBuffer): {
        publicKey: ArrayBuffer;
        secretKey: ArrayBuffer;
    };
    function jsi_crypto_sign_detached(message: string | ArrayBuffer, privateKey: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_sign_verify_detached(signature: ArrayBuffer, message: string | ArrayBuffer, publicKey: ArrayBuffer): boolean;
    function jsi_crypto_secretbox_easy(message: string | ArrayBuffer, nonce: ArrayBuffer, key: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_secretbox_open_easy(ciphertext: string | ArrayBuffer, nonce: ArrayBuffer, key: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_box_easy(message: string | ArrayBuffer, nonce: ArrayBuffer, publicKey: ArrayBuffer, secretKey: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_box_open_easy(ciphertext: string | ArrayBuffer, nonce: ArrayBuffer, publicKey: ArrayBuffer, secretKey: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_box_seal(message: string | ArrayBuffer, publicKey: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_box_seal_open(ciphertext: string | ArrayBuffer, publicKey: ArrayBuffer, secretKey: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_generichash(hashLength: number, message: string | ArrayBuffer, key?: ArrayBuffer | null | undefined): ArrayBuffer;
    function jsi_crypto_pwhash(keyLength: number, password: string | ArrayBuffer, salt: ArrayBuffer, opsLimit: number, memLimit: number, algorithm: number): ArrayBuffer;
    function jsi_crypto_kdf_derive_from_key(subkeyLength: number, subkeyId: number, context: string, key: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_aead_xchacha20poly1305_ietf_encrypt(message: string | ArrayBuffer, additionalData: string, public_nonce: ArrayBuffer, key: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext: string | ArrayBuffer, additionalData: string, public_nonce: ArrayBuffer, key: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext: string | ArrayBuffer, additionalData: string, public_nonce: ArrayBuffer, key: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_kdf_hkdf_sha256_extract(key: ArrayBuffer, salt: ArrayBuffer): ArrayBuffer;
    function jsi_crypto_kdf_hkdf_sha256_expand(key: ArrayBuffer, info: string, length: number): ArrayBuffer;
}
export declare const crypto_auth_BYTES: number;
export declare const crypto_auth_KEYBYTES: number;
export declare const crypto_secretbox_KEYBYTES: number;
export declare const crypto_secretbox_NONCEBYTES: number;
export declare const crypto_box_PUBLICKEYBYTES: number;
export declare const crypto_box_SECRETKEYBYTES: number;
export declare const crypto_box_NONCEBYTES: number;
export declare const crypto_box_SEEDBYTES: number;
export declare const crypto_aead_xchacha20poly1305_ietf_KEYBYTES: number;
export declare const crypto_aead_xchacha20poly1305_ietf_NPUBBYTES: number;
export declare const crypto_kdf_KEYBYTES: number;
export declare const crypto_kdf_CONTEXTBYTES: number;
export declare const crypto_generichash_BYTES: number;
export declare const crypto_generichash_BYTES_MIN: number;
export declare const crypto_generichash_BYTES_MAX: number;
export declare const crypto_generichash_KEYBYTES: number;
export declare const crypto_generichash_KEYBYTES_MIN: number;
export declare const crypto_generichash_KEYBYTES_MAX: number;
export declare const crypto_sign_SEEDBYTES: number;
export declare const crypto_pwhash_SALTBYTES: number;
export declare const crypto_pwhash_ALG_DEFAULT: number;
export declare const crypto_pwhash_OPSLIMIT_INTERACTIVE: number;
export declare const crypto_pwhash_MEMLIMIT_INTERACTIVE: number;
export declare const crypto_pwhash_BYTES_MIN: number;
export declare const crypto_pwhash_BYTES_MAX: number;
export declare const _unstable_crypto_kdf_hkdf_sha256_BYTES_MAX: number;
export declare const _unstable_crypto_kdf_hkdf_sha256_BYTES_MIN: number;
export declare const _unstable_crypto_kdf_hkdf_sha256_KEYBYTES: number;
export declare const from_base64: (input: string, variant?: base64_variants) => Uint8Array;
export declare const to_base64: (input: string | Uint8Array, variant?: base64_variants) => string;
export declare function to_hex(input: string | Uint8Array): string;
export declare function randombytes_buf(length: number, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function randombytes_buf(length: number, outputFormat: StringOutputFormat): string;
export declare function randombytes_uniform(upper_bound: number): number;
export declare function crypto_auth(message: string | Uint8Array, key: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_auth(message: string | Uint8Array, key: Uint8Array, outputFormat: StringOutputFormat): string;
export declare function crypto_auth_keygen(outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_auth_keygen(outputFormat: StringOutputFormat): string;
export declare function crypto_auth_verify(tag: Uint8Array, message: string | Uint8Array, key: Uint8Array): boolean;
export declare function crypto_secretbox_keygen(outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_secretbox_keygen(outputFormat: StringOutputFormat): string;
export declare function crypto_aead_xchacha20poly1305_ietf_keygen(outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_aead_xchacha20poly1305_ietf_keygen(outputFormat: StringOutputFormat): string;
export declare function crypto_kdf_keygen(outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_kdf_keygen(outputFormat: StringOutputFormat): string;
export declare function crypto_box_keypair(outputFormat?: Uint8ArrayOutputFormat | null): KeyPair;
export declare function crypto_box_keypair(outputFormat: StringOutputFormat): StringKeyPair;
export declare function crypto_box_seed_keypair(seed: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): KeyPair;
export declare function crypto_box_seed_keypair(seed: Uint8Array, outputFormat: StringOutputFormat): StringKeyPair;
export declare function crypto_sign_keypair(outputFormat?: Uint8ArrayOutputFormat | null): KeyPair;
export declare function crypto_sign_keypair(outputFormat: StringOutputFormat): StringKeyPair;
export declare function crypto_sign_seed_keypair(seed: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): KeyPair;
export declare function crypto_sign_seed_keypair(seed: Uint8Array, outputFormat: StringOutputFormat): StringKeyPair;
export declare function crypto_sign_detached(message: string | Uint8Array, privateKey: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_sign_detached(message: string | Uint8Array, privateKey: Uint8Array, outputFormat: StringOutputFormat): string;
export declare function crypto_sign_verify_detached(signature: Uint8Array, message: string | Uint8Array, publicKey: Uint8Array): boolean;
export declare function crypto_secretbox_easy(message: string | Uint8Array, nonce: Uint8Array, key: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_secretbox_easy(message: string | Uint8Array, nonce: Uint8Array, key: Uint8Array, outputFormat: StringOutputFormat): string;
export declare function crypto_secretbox_open_easy(ciphertext: string | Uint8Array, nonce: Uint8Array, key: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_secretbox_open_easy(ciphertext: string | Uint8Array, nonce: Uint8Array, key: Uint8Array, outputFormat: StringOutputFormat): string;
export declare function crypto_box_easy(message: string | Uint8Array, nonce: Uint8Array, publicKey: Uint8Array, privateKey: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_box_easy(message: string | Uint8Array, nonce: Uint8Array, publicKey: Uint8Array, privateKey: Uint8Array, outputFormat: StringOutputFormat): string;
export declare function crypto_box_open_easy(ciphertext: string | Uint8Array, nonce: Uint8Array, publicKey: Uint8Array, privateKey: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_box_open_easy(ciphertext: string | Uint8Array, nonce: Uint8Array, publicKey: Uint8Array, privateKey: Uint8Array, outputFormat: StringOutputFormat): string;
export declare function crypto_box_seal(ciphertext: string | Uint8Array, publicKey: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_box_seal(ciphertext: string | Uint8Array, publicKey: Uint8Array, outputFormat: StringOutputFormat): string;
export declare function crypto_box_seal_open(ciphertext: string | Uint8Array, publicKey: Uint8Array, privateKey: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_box_seal_open(ciphertext: string | Uint8Array, publicKey: Uint8Array, privateKey: Uint8Array, outputFormat: StringOutputFormat): string;
export declare function crypto_generichash(hash_length: number, message: string | Uint8Array, key?: Uint8Array | null | undefined, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_generichash(hash_length: number, message: string | Uint8Array, key: Uint8Array | null | undefined, outputFormat: StringOutputFormat): string;
export declare function crypto_pwhash(keyLength: number, password: string | Uint8Array, salt: Uint8Array, opsLimit: number, memLimit: number, algorithm: number, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_pwhash(keyLength: number, password: string | Uint8Array, salt: Uint8Array, opsLimit: number, memLimit: number, algorithm: number, outputFormat: StringOutputFormat): string;
export declare function crypto_kdf_derive_from_key(subkey_len: number, subkey_id: number, ctx: string, key: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_kdf_derive_from_key(subkey_len: number, subkey_id: number, ctx: string, key: Uint8Array, outputFormat: StringOutputFormat): string;
export declare function crypto_aead_xchacha20poly1305_ietf_encrypt(message: string | Uint8Array, additional_data: string | Uint8Array | null, secret_nonce: string | Uint8Array | null, public_nonce: Uint8Array, key: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_aead_xchacha20poly1305_ietf_encrypt(message: string | Uint8Array, additional_data: string | Uint8Array | null, secret_nonce: string | Uint8Array | null, public_nonce: Uint8Array, key: Uint8Array, outputFormat: StringOutputFormat): string;
export declare function crypto_aead_xchacha20poly1305_ietf_decrypt(secret_nonce: string | Uint8Array | null, ciphertext: string | Uint8Array, additional_data: string | Uint8Array | null, public_nonce: Uint8Array, key: Uint8Array, outputFormat?: Uint8ArrayOutputFormat | null): Uint8Array;
export declare function crypto_aead_xchacha20poly1305_ietf_decrypt(secret_nonce: string | Uint8Array | null, ciphertext: string | Uint8Array, additional_data: string | Uint8Array | null, public_nonce: Uint8Array, key: Uint8Array, outputFormat: StringOutputFormat): string;
export declare function _unstable_crypto_kdf_hkdf_sha256_extract(key: Uint8Array, salt: Uint8Array): Uint8Array;
export declare function _unstable_crypto_kdf_hkdf_sha256_expand(key: Uint8Array, info: string, length: number): Uint8Array;
export declare const ready: Promise<void>;
export declare const loadSumoVersion: () => undefined;
declare const _default: {
    crypto_auth: typeof crypto_auth;
    crypto_auth_verify: typeof crypto_auth_verify;
    crypto_auth_BYTES: number;
    crypto_auth_KEYBYTES: number;
    crypto_auth_keygen: typeof crypto_auth_keygen;
    crypto_aead_xchacha20poly1305_ietf_decrypt: typeof crypto_aead_xchacha20poly1305_ietf_decrypt;
    crypto_aead_xchacha20poly1305_ietf_encrypt: typeof crypto_aead_xchacha20poly1305_ietf_encrypt;
    crypto_aead_xchacha20poly1305_ietf_KEYBYTES: number;
    crypto_aead_xchacha20poly1305_ietf_keygen: typeof crypto_aead_xchacha20poly1305_ietf_keygen;
    crypto_aead_xchacha20poly1305_ietf_NPUBBYTES: number;
    crypto_box_easy: typeof crypto_box_easy;
    crypto_box_seed_keypair: typeof crypto_box_seed_keypair;
    crypto_box_keypair: typeof crypto_box_keypair;
    crypto_box_NONCEBYTES: number;
    crypto_box_open_easy: typeof crypto_box_open_easy;
    crypto_box_PUBLICKEYBYTES: number;
    crypto_box_SECRETKEYBYTES: number;
    crypto_generichash: typeof crypto_generichash;
    crypto_generichash_BYTES: number;
    crypto_generichash_BYTES_MIN: number;
    crypto_generichash_BYTES_MAX: number;
    crypto_generichash_KEYBYTES: number;
    crypto_generichash_KEYBYTES_MIN: number;
    crypto_generichash_KEYBYTES_MAX: number;
    crypto_kdf_derive_from_key: typeof crypto_kdf_derive_from_key;
    crypto_kdf_CONTEXTBYTES: number;
    crypto_kdf_KEYBYTES: number;
    crypto_kdf_keygen: typeof crypto_kdf_keygen;
    crypto_pwhash: typeof crypto_pwhash;
    crypto_pwhash_ALG_DEFAULT: number;
    crypto_pwhash_BYTES_MAX: number;
    crypto_pwhash_BYTES_MIN: number;
    crypto_pwhash_MEMLIMIT_INTERACTIVE: number;
    crypto_pwhash_OPSLIMIT_INTERACTIVE: number;
    crypto_pwhash_SALTBYTES: number;
    crypto_secretbox_easy: typeof crypto_secretbox_easy;
    crypto_secretbox_KEYBYTES: number;
    crypto_secretbox_keygen: typeof crypto_secretbox_keygen;
    crypto_secretbox_NONCEBYTES: number;
    crypto_secretbox_open_easy: typeof crypto_secretbox_open_easy;
    crypto_sign_detached: typeof crypto_sign_detached;
    crypto_sign_keypair: typeof crypto_sign_keypair;
    crypto_sign_verify_detached: typeof crypto_sign_verify_detached;
    from_base64: (input: string, variant?: base64_variants | undefined) => Uint8Array;
    randombytes_buf: typeof randombytes_buf;
    randombytes_uniform: typeof randombytes_uniform;
    ready: Promise<void>;
    to_base64: (input: string | Uint8Array, variant?: base64_variants | undefined) => string;
    to_hex: typeof to_hex;
    to_string: (bytes: Uint8Array) => string;
    _unstable_crypto_kdf_hkdf_sha256_BYTES_MAX: number;
    _unstable_crypto_kdf_hkdf_sha256_BYTES_MIN: number;
    _unstable_crypto_kdf_hkdf_sha256_KEYBYTES: number;
    _unstable_crypto_kdf_hkdf_sha256_extract: typeof _unstable_crypto_kdf_hkdf_sha256_extract;
    _unstable_crypto_kdf_hkdf_sha256_expand: typeof _unstable_crypto_kdf_hkdf_sha256_expand;
};
export default _default;
//# sourceMappingURL=lib.native.d.ts.map