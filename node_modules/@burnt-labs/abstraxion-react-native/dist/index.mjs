var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/hooks/useAbstraxionAccount.ts
import { useContext } from "react";

// src/components/AbstraxionContext/index.tsx
import { createContext, useCallback, useEffect, useState } from "react";
import { testnetChainInfo, xionGasValues } from "@burnt-labs/constants";
import { GasPrice } from "@cosmjs/stargate";
import { AbstraxionAuth } from "@burnt-labs/abstraxion-core";

// src/strategies/index.ts
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as WebBrowser from "expo-web-browser";
import * as Linking from "expo-linking";
var ReactNativeStorageStrategy = class {
  getItem(key) {
    return __async(this, null, function* () {
      try {
        return yield AsyncStorage.getItem(key);
      } catch (error) {
        console.error("AsyncStorage getItem error:", error);
        return null;
      }
    });
  }
  setItem(key, value) {
    return __async(this, null, function* () {
      try {
        yield AsyncStorage.setItem(key, value);
      } catch (error) {
        console.error("AsyncStorage setItem error:", error);
      }
    });
  }
  removeItem(key) {
    return __async(this, null, function* () {
      try {
        yield AsyncStorage.removeItem(key);
      } catch (error) {
        console.error("AsyncStorage removeItem error:", error);
      }
    });
  }
};
var ReactNativeRedirectStrategy = class {
  getCurrentUrl() {
    return __async(this, null, function* () {
      return Linking.createURL("");
    });
  }
  redirect(url) {
    return __async(this, null, function* () {
      var _a;
      try {
        const result = yield WebBrowser.openAuthSessionAsync(
          url,
          Linking.createURL("")
        );
        if (result.type === "cancel" || result.type === "dismiss") {
          throw new Error("Authentication session was cancelled");
        }
        if (result.type === "success" && result.url && this.redirectCallback) {
          const { queryParams } = Linking.parse(result.url);
          this.redirectCallback({
            granter: ((_a = queryParams == null ? void 0 : queryParams.granter) == null ? void 0 : _a.toString()) || null
          });
        }
      } catch (error) {
        console.error("Error during authentication:", error);
        throw error;
      }
    });
  }
  onRedirectComplete(callback) {
    return __async(this, null, function* () {
      this.redirectCallback = callback;
    });
  }
  removeRedirectHandler() {
    return __async(this, null, function* () {
      this.redirectCallback = void 0;
    });
  }
  getUrlParameter(param) {
    return __async(this, null, function* () {
      var _a;
      try {
        const url = yield Linking.getInitialURL();
        if (!url)
          return null;
        const { queryParams } = Linking.parse(url);
        return ((_a = queryParams == null ? void 0 : queryParams[param]) == null ? void 0 : _a.toString()) || null;
      } catch (error) {
        console.error("Error getting URL parameter:", error);
        return null;
      }
    });
  }
};

// src/components/AbstraxionContext/index.tsx
var abstraxionAuth = new AbstraxionAuth(
  new ReactNativeStorageStrategy(),
  new ReactNativeRedirectStrategy()
);
function AbstraxionProvider({
  children,
  config: {
    contracts,
    rpcUrl = testnetChainInfo.rpc,
    restUrl = testnetChainInfo.rest,
    stake = false,
    bank,
    callbackUrl,
    treasury,
    gasPrice
  }
}) {
  const [abstraxionError, setAbstraxionError] = useState("");
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [abstraxionAccount, setAbstraxionAccount] = useState(void 0);
  const [granterAddress, setGranterAddress] = useState("");
  const [dashboardUrl, setDashboardUrl] = useState("");
  let gasPriceDefault;
  const { gasPrice: gasPriceConstant } = xionGasValues;
  if (rpcUrl.includes("mainnet")) {
    gasPriceDefault = GasPrice.fromString(gasPriceConstant);
  } else {
    gasPriceDefault = GasPrice.fromString("0.001uxion");
  }
  const configureInstance = useCallback(() => {
    abstraxionAuth.configureAbstraxionInstance(
      rpcUrl,
      restUrl || "",
      contracts,
      stake,
      bank,
      callbackUrl,
      treasury
    );
  }, [rpcUrl, restUrl, contracts, stake, bank, callbackUrl, treasury]);
  useEffect(() => {
    configureInstance();
  }, [configureInstance]);
  useEffect(() => {
    const unsubscribe = abstraxionAuth.subscribeToAuthStateChange(
      (newState) => __async(this, null, function* () {
        if (newState !== isConnected) {
          setIsConnected(newState);
          if (newState) {
            const account = yield abstraxionAuth.getLocalKeypair();
            const granterAddress2 = yield abstraxionAuth.getGranter();
            setAbstraxionAccount(account);
            setGranterAddress(granterAddress2);
          }
        }
      })
    );
    return () => {
      unsubscribe == null ? void 0 : unsubscribe();
    };
  }, [isConnected, abstraxionAuth]);
  const persistAuthenticateState = useCallback(() => __async(this, null, function* () {
    yield abstraxionAuth.authenticate();
  }), [abstraxionAuth]);
  useEffect(() => {
    if (!isConnecting && !abstraxionAccount && !granterAddress) {
      persistAuthenticateState();
    }
  }, [
    isConnecting,
    abstraxionAccount,
    granterAddress,
    persistAuthenticateState
  ]);
  function login() {
    return __async(this, null, function* () {
      try {
        setIsConnecting(true);
        yield abstraxionAuth.login();
      } catch (error) {
        console.log(error);
        throw error;
      } finally {
        setIsConnecting(false);
      }
    });
  }
  const logout = useCallback(() => {
    setIsConnected(false);
    setAbstraxionAccount(void 0);
    setGranterAddress("");
    abstraxionAuth == null ? void 0 : abstraxionAuth.logout();
  }, [abstraxionAuth]);
  return <AbstraxionContext.Provider
    value={{
      isConnected,
      setIsConnected,
      isConnecting,
      setIsConnecting,
      abstraxionError,
      setAbstraxionError,
      abstraxionAccount,
      setAbstraxionAccount,
      granterAddress,
      setGranterAddress,
      contracts,
      dashboardUrl,
      setDashboardUrl,
      rpcUrl,
      restUrl,
      stake,
      bank,
      treasury,
      logout,
      login,
      gasPrice: gasPrice ? GasPrice.fromString(gasPrice) : gasPriceDefault
    }}
  >{children}</AbstraxionContext.Provider>;
}
var AbstraxionContext = createContext(
  {}
);

// src/hooks/useAbstraxionAccount.ts
var useAbstraxionAccount = () => {
  const { isConnected, granterAddress, isConnecting, login, logout } = useContext(AbstraxionContext);
  return {
    data: {
      bech32Address: granterAddress
    },
    isConnected,
    isConnecting,
    login,
    logout
  };
};

// src/hooks/useAbstraxionClient.ts
import { useContext as useContext2, useEffect as useEffect2, useState as useState2 } from "react";
import { testnetChainInfo as testnetChainInfo2 } from "@burnt-labs/constants";
import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
var useAbstraxionClient = () => {
  const { rpcUrl } = useContext2(AbstraxionContext);
  const [abstractClient, setAbstractClient] = useState2(void 0);
  useEffect2(() => {
    function getClient() {
      return __async(this, null, function* () {
        try {
          const client = yield CosmWasmClient.connect(
            // Should be set in the context but defaulting here just in case
            rpcUrl || testnetChainInfo2.rpc
          );
          setAbstractClient(client);
        } catch (error) {
          setAbstractClient(void 0);
        }
      });
    }
    getClient();
  }, [rpcUrl]);
  return {
    client: abstractClient
  };
};

// src/hooks/useAbstraxionSigningClient.ts
import { useContext as useContext3, useEffect as useEffect3, useState as useState3 } from "react";
import { testnetChainInfo as testnetChainInfo3 } from "@burnt-labs/constants";
import {
  GranteeSignerClient
} from "@burnt-labs/abstraxion-core";
var useAbstraxionSigningClient = () => {
  const {
    isConnected,
    abstraxionAccount,
    granterAddress,
    rpcUrl,
    gasPrice,
    treasury
  } = useContext3(AbstraxionContext);
  const [signArbWallet, setSignArbWallet] = useState3(void 0);
  const [abstractClient, setAbstractClient] = useState3(void 0);
  useEffect3(() => {
    function getSigner() {
      return __async(this, null, function* () {
        try {
          if (!abstraxionAccount) {
            throw new Error("No account found.");
          }
          if (!granterAddress) {
            throw new Error("No granter found.");
          }
          const granteeAddress = yield abstraxionAccount.getAccounts().then((accounts) => {
            if (accounts.length === 0) {
              throw new Error("No account found.");
            }
            return accounts[0].address;
          });
          const directClient = yield GranteeSignerClient.connectWithSigner(
            // Should be set in the context but defaulting here just in case
            rpcUrl || testnetChainInfo3.rpc,
            abstraxionAccount,
            {
              gasPrice,
              granterAddress,
              granteeAddress,
              treasuryAddress: treasury
            }
          );
          const wallet = yield abstraxionAuth.getLocalKeypair();
          if (wallet) {
            setSignArbWallet(wallet);
          }
          setAbstractClient(directClient);
        } catch (error) {
          setAbstractClient(void 0);
        }
      });
    }
    getSigner();
  }, [isConnected, abstraxionAccount, granterAddress, abstraxionAuth]);
  return {
    client: abstractClient,
    signArb: signArbWallet == null ? void 0 : signArbWallet.signArb
  };
};
export {
  AbstraxionContext,
  AbstraxionProvider,
  ReactNativeRedirectStrategy,
  ReactNativeStorageStrategy,
  abstraxionAuth,
  useAbstraxionAccount,
  useAbstraxionClient,
  useAbstraxionSigningClient
};
//# sourceMappingURL=index.mjs.map