import { CosmWasmClient } from '@cosmjs/cosmwasm-stargate';
import { GranteeSignerClient, StorageStrategy, RedirectStrategy, AbstraxionAuth, SignArbSecp256k1HdWallet } from '@burnt-labs/abstraxion-core';
import * as react from 'react';
import { GasPrice } from '@cosmjs/stargate';

interface AbstraxionAccount {
    bech32Address: string;
}
interface AbstraxionAccountState {
    data: AbstraxionAccount;
    isConnected: boolean;
    isConnecting: boolean;
    login: () => Promise<void>;
    logout: () => void;
}
declare const useAbstraxionAccount: () => AbstraxionAccountState;

declare const useAbstraxionClient: () => {
    readonly client: CosmWasmClient | undefined;
};

declare const useAbstraxionSigningClient: () => {
    readonly client: GranteeSignerClient | undefined;
    readonly signArb: ((signerAddress: string, message: string | Uint8Array) => Promise<string>) | undefined;
};

/**
 * React Native implementation of the StorageStrategy using AsyncStorage
 */
declare class ReactNativeStorageStrategy implements StorageStrategy {
    getItem(key: string): Promise<string | null>;
    setItem(key: string, value: string): Promise<void>;
    removeItem(key: string): Promise<void>;
}
/**
 * React Native implementation of the RedirectStrategy using Expo WebBrowser
 */
declare class ReactNativeRedirectStrategy implements RedirectStrategy {
    private redirectCallback?;
    getCurrentUrl(): Promise<string>;
    redirect(url: string): Promise<void>;
    onRedirectComplete(callback: (params: {
        granter?: string | null;
    }) => void): Promise<void>;
    removeRedirectHandler(): Promise<void>;
    getUrlParameter(param: string): Promise<string | null>;
}

declare const abstraxionAuth: AbstraxionAuth;
type SpendLimit = {
    denom: string;
    amount: string;
};
type ContractGrantDescription = string | {
    address: string;
    amounts: SpendLimit[];
};
interface AbstraxionContextProps {
    isConnected: boolean;
    setIsConnected: React.Dispatch<React.SetStateAction<boolean>>;
    isConnecting: boolean;
    setIsConnecting: React.Dispatch<React.SetStateAction<boolean>>;
    abstraxionError: string;
    setAbstraxionError: React.Dispatch<React.SetStateAction<string>>;
    abstraxionAccount: SignArbSecp256k1HdWallet | undefined;
    setAbstraxionAccount: React.Dispatch<SignArbSecp256k1HdWallet | undefined>;
    granterAddress: string;
    setGranterAddress: React.Dispatch<React.SetStateAction<string>>;
    contracts?: ContractGrantDescription[];
    dashboardUrl?: string;
    setDashboardUrl: React.Dispatch<React.SetStateAction<string>>;
    rpcUrl: string;
    restUrl: string;
    stake?: boolean;
    bank?: SpendLimit[];
    treasury?: string;
    gasPrice: GasPrice;
    logout: () => void;
    login: () => Promise<void>;
}
interface AbstraxionConfig {
    contracts?: ContractGrantDescription[];
    rpcUrl?: string;
    restUrl?: string;
    stake?: boolean;
    bank?: SpendLimit[];
    callbackUrl?: string;
    treasury?: string;
    gasPrice?: string;
}
declare function AbstraxionProvider({ children, config: { contracts, rpcUrl, restUrl, stake, bank, callbackUrl, treasury, gasPrice, }, }: {
    children: React.ReactNode;
    config: AbstraxionConfig;
}): JSX.Element;
declare const AbstraxionContext: react.Context<AbstraxionContextProps>;

export { AbstraxionAccount, AbstraxionAccountState, AbstraxionConfig, AbstraxionContext, AbstraxionContextProps, AbstraxionProvider, ContractGrantDescription, ReactNativeRedirectStrategy, ReactNativeStorageStrategy, SpendLimit, abstraxionAuth, useAbstraxionAccount, useAbstraxionClient, useAbstraxionSigningClient };
