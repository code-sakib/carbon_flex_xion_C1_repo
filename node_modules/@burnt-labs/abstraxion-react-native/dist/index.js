"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AbstraxionContext: () => AbstraxionContext,
  AbstraxionProvider: () => AbstraxionProvider,
  ReactNativeRedirectStrategy: () => ReactNativeRedirectStrategy,
  ReactNativeStorageStrategy: () => ReactNativeStorageStrategy,
  abstraxionAuth: () => abstraxionAuth,
  useAbstraxionAccount: () => useAbstraxionAccount,
  useAbstraxionClient: () => useAbstraxionClient,
  useAbstraxionSigningClient: () => useAbstraxionSigningClient
});
module.exports = __toCommonJS(src_exports);

// src/hooks/useAbstraxionAccount.ts
var import_react2 = require("react");

// src/components/AbstraxionContext/index.tsx
var import_react = require("react");
var import_constants = require("@burnt-labs/constants");
var import_stargate = require("@cosmjs/stargate");
var import_abstraxion_core = require("@burnt-labs/abstraxion-core");

// src/strategies/index.ts
var import_async_storage = __toESM(require("@react-native-async-storage/async-storage"));
var WebBrowser = __toESM(require("expo-web-browser"));
var Linking = __toESM(require("expo-linking"));
var ReactNativeStorageStrategy = class {
  getItem(key) {
    return __async(this, null, function* () {
      try {
        return yield import_async_storage.default.getItem(key);
      } catch (error) {
        console.error("AsyncStorage getItem error:", error);
        return null;
      }
    });
  }
  setItem(key, value) {
    return __async(this, null, function* () {
      try {
        yield import_async_storage.default.setItem(key, value);
      } catch (error) {
        console.error("AsyncStorage setItem error:", error);
      }
    });
  }
  removeItem(key) {
    return __async(this, null, function* () {
      try {
        yield import_async_storage.default.removeItem(key);
      } catch (error) {
        console.error("AsyncStorage removeItem error:", error);
      }
    });
  }
};
var ReactNativeRedirectStrategy = class {
  getCurrentUrl() {
    return __async(this, null, function* () {
      return Linking.createURL("");
    });
  }
  redirect(url) {
    return __async(this, null, function* () {
      var _a;
      try {
        const result = yield WebBrowser.openAuthSessionAsync(
          url,
          Linking.createURL("")
        );
        if (result.type === "cancel" || result.type === "dismiss") {
          throw new Error("Authentication session was cancelled");
        }
        if (result.type === "success" && result.url && this.redirectCallback) {
          const { queryParams } = Linking.parse(result.url);
          this.redirectCallback({
            granter: ((_a = queryParams == null ? void 0 : queryParams.granter) == null ? void 0 : _a.toString()) || null
          });
        }
      } catch (error) {
        console.error("Error during authentication:", error);
        throw error;
      }
    });
  }
  onRedirectComplete(callback) {
    return __async(this, null, function* () {
      this.redirectCallback = callback;
    });
  }
  removeRedirectHandler() {
    return __async(this, null, function* () {
      this.redirectCallback = void 0;
    });
  }
  getUrlParameter(param) {
    return __async(this, null, function* () {
      var _a;
      try {
        const url = yield Linking.getInitialURL();
        if (!url)
          return null;
        const { queryParams } = Linking.parse(url);
        return ((_a = queryParams == null ? void 0 : queryParams[param]) == null ? void 0 : _a.toString()) || null;
      } catch (error) {
        console.error("Error getting URL parameter:", error);
        return null;
      }
    });
  }
};

// src/components/AbstraxionContext/index.tsx
var abstraxionAuth = new import_abstraxion_core.AbstraxionAuth(
  new ReactNativeStorageStrategy(),
  new ReactNativeRedirectStrategy()
);
function AbstraxionProvider({
  children,
  config: {
    contracts,
    rpcUrl = import_constants.testnetChainInfo.rpc,
    restUrl = import_constants.testnetChainInfo.rest,
    stake = false,
    bank,
    callbackUrl,
    treasury,
    gasPrice
  }
}) {
  const [abstraxionError, setAbstraxionError] = (0, import_react.useState)("");
  const [isConnected, setIsConnected] = (0, import_react.useState)(false);
  const [isConnecting, setIsConnecting] = (0, import_react.useState)(false);
  const [abstraxionAccount, setAbstraxionAccount] = (0, import_react.useState)(void 0);
  const [granterAddress, setGranterAddress] = (0, import_react.useState)("");
  const [dashboardUrl, setDashboardUrl] = (0, import_react.useState)("");
  let gasPriceDefault;
  const { gasPrice: gasPriceConstant } = import_constants.xionGasValues;
  if (rpcUrl.includes("mainnet")) {
    gasPriceDefault = import_stargate.GasPrice.fromString(gasPriceConstant);
  } else {
    gasPriceDefault = import_stargate.GasPrice.fromString("0.001uxion");
  }
  const configureInstance = (0, import_react.useCallback)(() => {
    abstraxionAuth.configureAbstraxionInstance(
      rpcUrl,
      restUrl || "",
      contracts,
      stake,
      bank,
      callbackUrl,
      treasury
    );
  }, [rpcUrl, restUrl, contracts, stake, bank, callbackUrl, treasury]);
  (0, import_react.useEffect)(() => {
    configureInstance();
  }, [configureInstance]);
  (0, import_react.useEffect)(() => {
    const unsubscribe = abstraxionAuth.subscribeToAuthStateChange(
      (newState) => __async(this, null, function* () {
        if (newState !== isConnected) {
          setIsConnected(newState);
          if (newState) {
            const account = yield abstraxionAuth.getLocalKeypair();
            const granterAddress2 = yield abstraxionAuth.getGranter();
            setAbstraxionAccount(account);
            setGranterAddress(granterAddress2);
          }
        }
      })
    );
    return () => {
      unsubscribe == null ? void 0 : unsubscribe();
    };
  }, [isConnected, abstraxionAuth]);
  const persistAuthenticateState = (0, import_react.useCallback)(() => __async(this, null, function* () {
    yield abstraxionAuth.authenticate();
  }), [abstraxionAuth]);
  (0, import_react.useEffect)(() => {
    if (!isConnecting && !abstraxionAccount && !granterAddress) {
      persistAuthenticateState();
    }
  }, [
    isConnecting,
    abstraxionAccount,
    granterAddress,
    persistAuthenticateState
  ]);
  function login() {
    return __async(this, null, function* () {
      try {
        setIsConnecting(true);
        yield abstraxionAuth.login();
      } catch (error) {
        console.log(error);
        throw error;
      } finally {
        setIsConnecting(false);
      }
    });
  }
  const logout = (0, import_react.useCallback)(() => {
    setIsConnected(false);
    setAbstraxionAccount(void 0);
    setGranterAddress("");
    abstraxionAuth == null ? void 0 : abstraxionAuth.logout();
  }, [abstraxionAuth]);
  return <AbstraxionContext.Provider
    value={{
      isConnected,
      setIsConnected,
      isConnecting,
      setIsConnecting,
      abstraxionError,
      setAbstraxionError,
      abstraxionAccount,
      setAbstraxionAccount,
      granterAddress,
      setGranterAddress,
      contracts,
      dashboardUrl,
      setDashboardUrl,
      rpcUrl,
      restUrl,
      stake,
      bank,
      treasury,
      logout,
      login,
      gasPrice: gasPrice ? import_stargate.GasPrice.fromString(gasPrice) : gasPriceDefault
    }}
  >{children}</AbstraxionContext.Provider>;
}
var AbstraxionContext = (0, import_react.createContext)(
  {}
);

// src/hooks/useAbstraxionAccount.ts
var useAbstraxionAccount = () => {
  const { isConnected, granterAddress, isConnecting, login, logout } = (0, import_react2.useContext)(AbstraxionContext);
  return {
    data: {
      bech32Address: granterAddress
    },
    isConnected,
    isConnecting,
    login,
    logout
  };
};

// src/hooks/useAbstraxionClient.ts
var import_react3 = require("react");
var import_constants2 = require("@burnt-labs/constants");
var import_cosmwasm_stargate = require("@cosmjs/cosmwasm-stargate");
var useAbstraxionClient = () => {
  const { rpcUrl } = (0, import_react3.useContext)(AbstraxionContext);
  const [abstractClient, setAbstractClient] = (0, import_react3.useState)(void 0);
  (0, import_react3.useEffect)(() => {
    function getClient() {
      return __async(this, null, function* () {
        try {
          const client = yield import_cosmwasm_stargate.CosmWasmClient.connect(
            // Should be set in the context but defaulting here just in case
            rpcUrl || import_constants2.testnetChainInfo.rpc
          );
          setAbstractClient(client);
        } catch (error) {
          setAbstractClient(void 0);
        }
      });
    }
    getClient();
  }, [rpcUrl]);
  return {
    client: abstractClient
  };
};

// src/hooks/useAbstraxionSigningClient.ts
var import_react4 = require("react");
var import_constants3 = require("@burnt-labs/constants");
var import_abstraxion_core2 = require("@burnt-labs/abstraxion-core");
var useAbstraxionSigningClient = () => {
  const {
    isConnected,
    abstraxionAccount,
    granterAddress,
    rpcUrl,
    gasPrice,
    treasury
  } = (0, import_react4.useContext)(AbstraxionContext);
  const [signArbWallet, setSignArbWallet] = (0, import_react4.useState)(void 0);
  const [abstractClient, setAbstractClient] = (0, import_react4.useState)(void 0);
  (0, import_react4.useEffect)(() => {
    function getSigner() {
      return __async(this, null, function* () {
        try {
          if (!abstraxionAccount) {
            throw new Error("No account found.");
          }
          if (!granterAddress) {
            throw new Error("No granter found.");
          }
          const granteeAddress = yield abstraxionAccount.getAccounts().then((accounts) => {
            if (accounts.length === 0) {
              throw new Error("No account found.");
            }
            return accounts[0].address;
          });
          const directClient = yield import_abstraxion_core2.GranteeSignerClient.connectWithSigner(
            // Should be set in the context but defaulting here just in case
            rpcUrl || import_constants3.testnetChainInfo.rpc,
            abstraxionAccount,
            {
              gasPrice,
              granterAddress,
              granteeAddress,
              treasuryAddress: treasury
            }
          );
          const wallet = yield abstraxionAuth.getLocalKeypair();
          if (wallet) {
            setSignArbWallet(wallet);
          }
          setAbstractClient(directClient);
        } catch (error) {
          setAbstractClient(void 0);
        }
      });
    }
    getSigner();
  }, [isConnected, abstraxionAccount, granterAddress, abstraxionAuth]);
  return {
    client: abstractClient,
    signArb: signArbWallet == null ? void 0 : signArbWallet.signArb
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AbstraxionContext,
  AbstraxionProvider,
  ReactNativeRedirectStrategy,
  ReactNativeStorageStrategy,
  abstraxionAuth,
  useAbstraxionAccount,
  useAbstraxionClient,
  useAbstraxionSigningClient
});
//# sourceMappingURL=index.js.map