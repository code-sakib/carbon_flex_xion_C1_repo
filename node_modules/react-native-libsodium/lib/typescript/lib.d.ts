export type { CryptoBox, CryptoKX, KeyPair, KeyType, MessageTag, SecretBox, StateAddress, StringCryptoBox, StringCryptoKX, StringKeyPair, StringMessageTag, StringOutputFormat, StringSecretBox, Uint8ArrayOutputFormat, } from 'libsodium-wrappers';
import type { CryptoBox, CryptoKX, KeyPair, KeyType, MessageTag, SecretBox, StateAddress, StringCryptoBox, StringCryptoKX, StringKeyPair, StringMessageTag, StringOutputFormat, StringSecretBox, Uint8ArrayOutputFormat } from 'libsodium-wrappers';
export declare const loadSumoVersion: () => void;
declare let sodium: typeof import('libsodium-wrappers') & {
    loadSumoVersion: () => void;
    CryptoBox: CryptoBox;
    CryptoKX: CryptoKX;
    KeyPair: KeyPair;
    KeyType: KeyType;
    MessageTag: MessageTag;
    SecretBox: SecretBox;
    StateAddress: StateAddress;
    StringCryptoBox: StringCryptoBox;
    StringCryptoKX: StringCryptoKX;
    StringKeyPair: StringKeyPair;
    StringMessageTag: StringMessageTag;
    StringOutputFormat: StringOutputFormat;
    StringSecretBox: StringSecretBox;
    Uint8ArrayOutputFormat: Uint8ArrayOutputFormat;
};
export declare const ready: Promise<void>;
export default sodium;
export declare let add: typeof import("libsodium-wrappers").add;
export declare let base64_variants: typeof import("libsodium-wrappers").base64_variants;
export declare let compare: typeof import("libsodium-wrappers").compare;
export declare let from_base64: typeof import("libsodium-wrappers").from_base64;
export declare let from_hex: typeof import("libsodium-wrappers").from_hex;
export declare let from_string: typeof import("libsodium-wrappers").from_string;
export declare let increment: typeof import("libsodium-wrappers").increment;
export declare let is_zero: typeof import("libsodium-wrappers").is_zero;
export declare let libsodium: any;
export declare let memcmp: typeof import("libsodium-wrappers").memcmp;
export declare let memzero: typeof import("libsodium-wrappers").memzero;
export declare let output_formats: typeof import("libsodium-wrappers").output_formats;
export declare let pad: typeof import("libsodium-wrappers").pad;
export declare let unpad: typeof import("libsodium-wrappers").unpad;
export declare let symbols: typeof import("libsodium-wrappers").symbols;
export declare let to_base64: typeof import("libsodium-wrappers").to_base64;
export declare let to_hex: typeof import("libsodium-wrappers").to_hex;
export declare let to_string: typeof import("libsodium-wrappers").to_string;
export declare let crypto_aead_chacha20poly1305_decrypt: typeof import("libsodium-wrappers").crypto_aead_chacha20poly1305_decrypt;
export declare let crypto_aead_chacha20poly1305_decrypt_detached: typeof import("libsodium-wrappers").crypto_aead_chacha20poly1305_decrypt_detached;
export declare let crypto_aead_chacha20poly1305_encrypt: typeof import("libsodium-wrappers").crypto_aead_chacha20poly1305_encrypt;
export declare let crypto_aead_chacha20poly1305_encrypt_detached: typeof import("libsodium-wrappers").crypto_aead_chacha20poly1305_encrypt_detached;
export declare let crypto_aead_chacha20poly1305_ietf_decrypt: typeof import("libsodium-wrappers").crypto_aead_chacha20poly1305_ietf_decrypt;
export declare let crypto_aead_chacha20poly1305_ietf_decrypt_detached: typeof import("libsodium-wrappers").crypto_aead_chacha20poly1305_ietf_decrypt_detached;
export declare let crypto_aead_chacha20poly1305_ietf_encrypt: typeof import("libsodium-wrappers").crypto_aead_chacha20poly1305_ietf_encrypt;
export declare let crypto_aead_chacha20poly1305_ietf_encrypt_detached: typeof import("libsodium-wrappers").crypto_aead_chacha20poly1305_ietf_encrypt_detached;
export declare let crypto_aead_chacha20poly1305_ietf_keygen: typeof import("libsodium-wrappers").crypto_aead_chacha20poly1305_ietf_keygen;
export declare let crypto_aead_chacha20poly1305_keygen: typeof import("libsodium-wrappers").crypto_aead_chacha20poly1305_keygen;
export declare let crypto_aead_xchacha20poly1305_ietf_decrypt: typeof import("libsodium-wrappers").crypto_aead_xchacha20poly1305_ietf_decrypt;
export declare let crypto_aead_xchacha20poly1305_ietf_decrypt_detached: typeof import("libsodium-wrappers").crypto_aead_xchacha20poly1305_ietf_decrypt_detached;
export declare let crypto_aead_xchacha20poly1305_ietf_encrypt: typeof import("libsodium-wrappers").crypto_aead_xchacha20poly1305_ietf_encrypt;
export declare let crypto_aead_xchacha20poly1305_ietf_encrypt_detached: typeof import("libsodium-wrappers").crypto_aead_xchacha20poly1305_ietf_encrypt_detached;
export declare let crypto_aead_xchacha20poly1305_ietf_keygen: typeof import("libsodium-wrappers").crypto_aead_xchacha20poly1305_ietf_keygen;
export declare let crypto_auth: typeof import("libsodium-wrappers").crypto_auth;
export declare let crypto_auth_keygen: typeof import("libsodium-wrappers").crypto_auth_keygen;
export declare let crypto_auth_verify: typeof import("libsodium-wrappers").crypto_auth_verify;
export declare let crypto_box_beforenm: typeof import("libsodium-wrappers").crypto_box_beforenm;
export declare let crypto_box_detached: typeof import("libsodium-wrappers").crypto_box_detached;
export declare let crypto_box_easy: typeof import("libsodium-wrappers").crypto_box_easy;
export declare let crypto_box_easy_afternm: typeof import("libsodium-wrappers").crypto_box_easy_afternm;
export declare let crypto_box_keypair: typeof import("libsodium-wrappers").crypto_box_keypair;
export declare let crypto_box_open_detached: typeof import("libsodium-wrappers").crypto_box_open_detached;
export declare let crypto_box_open_easy: typeof import("libsodium-wrappers").crypto_box_open_easy;
export declare let crypto_box_open_easy_afternm: typeof import("libsodium-wrappers").crypto_box_open_easy_afternm;
export declare let crypto_box_seal: typeof import("libsodium-wrappers").crypto_box_seal;
export declare let crypto_box_seal_open: typeof import("libsodium-wrappers").crypto_box_seal_open;
export declare let crypto_box_seed_keypair: typeof import("libsodium-wrappers").crypto_box_seed_keypair;
export declare let crypto_generichash: typeof import("libsodium-wrappers").crypto_generichash;
export declare let crypto_generichash_final: typeof import("libsodium-wrappers").crypto_generichash_final;
export declare let crypto_generichash_init: typeof import("libsodium-wrappers").crypto_generichash_init;
export declare let crypto_generichash_keygen: typeof import("libsodium-wrappers").crypto_generichash_keygen;
export declare let crypto_generichash_update: typeof import("libsodium-wrappers").crypto_generichash_update;
export declare let crypto_hash: typeof import("libsodium-wrappers").crypto_hash;
export declare let crypto_kdf_derive_from_key: typeof import("libsodium-wrappers").crypto_kdf_derive_from_key;
export declare let crypto_kdf_keygen: typeof import("libsodium-wrappers").crypto_kdf_keygen;
export declare let crypto_kx_client_session_keys: typeof import("libsodium-wrappers").crypto_kx_client_session_keys;
export declare let crypto_kx_keypair: typeof import("libsodium-wrappers").crypto_kx_keypair;
export declare let crypto_kx_seed_keypair: typeof import("libsodium-wrappers").crypto_kx_seed_keypair;
export declare let crypto_kx_server_session_keys: typeof import("libsodium-wrappers").crypto_kx_server_session_keys;
export declare let crypto_pwhash: typeof import("libsodium-wrappers").crypto_pwhash;
export declare let crypto_pwhash_str: typeof import("libsodium-wrappers").crypto_pwhash_str;
export declare let crypto_pwhash_str_needs_rehash: typeof import("libsodium-wrappers").crypto_pwhash_str_needs_rehash;
export declare let crypto_pwhash_str_verify: typeof import("libsodium-wrappers").crypto_pwhash_str_verify;
export declare let crypto_scalarmult: typeof import("libsodium-wrappers").crypto_scalarmult;
export declare let crypto_scalarmult_base: typeof import("libsodium-wrappers").crypto_scalarmult_base;
export declare let crypto_secretbox_detached: typeof import("libsodium-wrappers").crypto_secretbox_detached;
export declare let crypto_secretbox_easy: typeof import("libsodium-wrappers").crypto_secretbox_easy;
export declare let crypto_secretbox_keygen: typeof import("libsodium-wrappers").crypto_secretbox_keygen;
export declare let crypto_secretbox_open_detached: typeof import("libsodium-wrappers").crypto_secretbox_open_detached;
export declare let crypto_secretbox_open_easy: typeof import("libsodium-wrappers").crypto_secretbox_open_easy;
export declare let crypto_secretstream_xchacha20poly1305_init_pull: typeof import("libsodium-wrappers").crypto_secretstream_xchacha20poly1305_init_pull;
export declare let crypto_secretstream_xchacha20poly1305_init_push: typeof import("libsodium-wrappers").crypto_secretstream_xchacha20poly1305_init_push;
export declare let crypto_secretstream_xchacha20poly1305_keygen: typeof import("libsodium-wrappers").crypto_secretstream_xchacha20poly1305_keygen;
export declare let crypto_secretstream_xchacha20poly1305_pull: typeof import("libsodium-wrappers").crypto_secretstream_xchacha20poly1305_pull;
export declare let crypto_secretstream_xchacha20poly1305_push: typeof import("libsodium-wrappers").crypto_secretstream_xchacha20poly1305_push;
export declare let crypto_secretstream_xchacha20poly1305_rekey: typeof import("libsodium-wrappers").crypto_secretstream_xchacha20poly1305_rekey;
export declare let crypto_shorthash: typeof import("libsodium-wrappers").crypto_shorthash;
export declare let crypto_shorthash_keygen: typeof import("libsodium-wrappers").crypto_shorthash_keygen;
export declare let crypto_sign: typeof import("libsodium-wrappers").crypto_sign;
export declare let crypto_sign_detached: typeof import("libsodium-wrappers").crypto_sign_detached;
export declare let crypto_sign_ed25519_pk_to_curve25519: typeof import("libsodium-wrappers").crypto_sign_ed25519_pk_to_curve25519;
export declare let crypto_sign_ed25519_sk_to_curve25519: typeof import("libsodium-wrappers").crypto_sign_ed25519_sk_to_curve25519;
export declare let crypto_sign_final_create: typeof import("libsodium-wrappers").crypto_sign_final_create;
export declare let crypto_sign_final_verify: typeof import("libsodium-wrappers").crypto_sign_final_verify;
export declare let crypto_sign_init: typeof import("libsodium-wrappers").crypto_sign_init;
export declare let crypto_sign_keypair: typeof import("libsodium-wrappers").crypto_sign_keypair;
export declare let crypto_sign_open: typeof import("libsodium-wrappers").crypto_sign_open;
export declare let crypto_sign_seed_keypair: typeof import("libsodium-wrappers").crypto_sign_seed_keypair;
export declare let crypto_sign_update: typeof import("libsodium-wrappers").crypto_sign_update;
export declare let crypto_sign_verify_detached: typeof import("libsodium-wrappers").crypto_sign_verify_detached;
export declare let randombytes_buf: typeof import("libsodium-wrappers").randombytes_buf;
export declare let randombytes_buf_deterministic: typeof import("libsodium-wrappers").randombytes_buf_deterministic;
export declare let randombytes_close: typeof import("libsodium-wrappers").randombytes_close;
export declare let randombytes_random: typeof import("libsodium-wrappers").randombytes_random;
export declare let randombytes_stir: typeof import("libsodium-wrappers").randombytes_stir;
export declare let randombytes_uniform: typeof import("libsodium-wrappers").randombytes_uniform;
export declare let sodium_version_string: typeof import("libsodium-wrappers").sodium_version_string;
export declare let SODIUM_LIBRARY_VERSION_MAJOR: number;
export declare let SODIUM_LIBRARY_VERSION_MINOR: number;
export declare let crypto_aead_chacha20poly1305_ABYTES: number;
export declare let crypto_aead_chacha20poly1305_IETF_ABYTES: number;
export declare let crypto_aead_chacha20poly1305_IETF_KEYBYTES: number;
export declare let crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX: number;
export declare let crypto_aead_chacha20poly1305_IETF_NPUBBYTES: number;
export declare let crypto_aead_chacha20poly1305_IETF_NSECBYTES: number;
export declare let crypto_aead_chacha20poly1305_KEYBYTES: number;
export declare let crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX: number;
export declare let crypto_aead_chacha20poly1305_NPUBBYTES: number;
export declare let crypto_aead_chacha20poly1305_NSECBYTES: number;
export declare let crypto_aead_chacha20poly1305_ietf_ABYTES: number;
export declare let crypto_aead_chacha20poly1305_ietf_KEYBYTES: number;
export declare let crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX: number;
export declare let crypto_aead_chacha20poly1305_ietf_NPUBBYTES: number;
export declare let crypto_aead_chacha20poly1305_ietf_NSECBYTES: number;
export declare let crypto_aead_xchacha20poly1305_IETF_ABYTES: number;
export declare let crypto_aead_xchacha20poly1305_IETF_KEYBYTES: number;
export declare let crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX: number;
export declare let crypto_aead_xchacha20poly1305_IETF_NPUBBYTES: number;
export declare let crypto_aead_xchacha20poly1305_IETF_NSECBYTES: number;
export declare let crypto_aead_xchacha20poly1305_ietf_ABYTES: number;
export declare let crypto_aead_xchacha20poly1305_ietf_KEYBYTES: number;
export declare let crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX: number;
export declare let crypto_aead_xchacha20poly1305_ietf_NPUBBYTES: number;
export declare let crypto_aead_xchacha20poly1305_ietf_NSECBYTES: number;
export declare let crypto_auth_BYTES: number;
export declare let crypto_auth_KEYBYTES: number;
export declare let crypto_box_BEFORENMBYTES: number;
export declare let crypto_box_MACBYTES: number;
export declare let crypto_box_MESSAGEBYTES_MAX: number;
export declare let crypto_box_NONCEBYTES: number;
export declare let crypto_box_PUBLICKEYBYTES: number;
export declare let crypto_box_SEALBYTES: number;
export declare let crypto_box_SECRETKEYBYTES: number;
export declare let crypto_box_SEEDBYTES: number;
export declare let crypto_generichash_BYTES: number;
export declare let crypto_generichash_BYTES_MAX: number;
export declare let crypto_generichash_BYTES_MIN: number;
export declare let crypto_generichash_KEYBYTES: number;
export declare let crypto_generichash_KEYBYTES_MAX: number;
export declare let crypto_generichash_KEYBYTES_MIN: number;
export declare let crypto_hash_BYTES: number;
export declare let crypto_kdf_BYTES_MAX: number;
export declare let crypto_kdf_BYTES_MIN: number;
export declare let crypto_kdf_CONTEXTBYTES: number;
export declare let crypto_kdf_KEYBYTES: number;
export declare let crypto_kx_PUBLICKEYBYTES: number;
export declare let crypto_kx_SECRETKEYBYTES: number;
export declare let crypto_kx_SEEDBYTES: number;
export declare let crypto_kx_SESSIONKEYBYTES: number;
export declare let crypto_pwhash_ALG_ARGON2I13: number;
export declare let crypto_pwhash_ALG_ARGON2ID13: number;
export declare let crypto_pwhash_ALG_DEFAULT: number;
export declare let crypto_pwhash_BYTES_MAX: number;
export declare let crypto_pwhash_BYTES_MIN: number;
export declare let crypto_pwhash_MEMLIMIT_INTERACTIVE: number;
export declare let crypto_pwhash_MEMLIMIT_MAX: number;
export declare let crypto_pwhash_MEMLIMIT_MIN: number;
export declare let crypto_pwhash_MEMLIMIT_MODERATE: number;
export declare let crypto_pwhash_MEMLIMIT_SENSITIVE: number;
export declare let crypto_pwhash_OPSLIMIT_INTERACTIVE: number;
export declare let crypto_pwhash_OPSLIMIT_MAX: number;
export declare let crypto_pwhash_OPSLIMIT_MIN: number;
export declare let crypto_pwhash_OPSLIMIT_MODERATE: number;
export declare let crypto_pwhash_OPSLIMIT_SENSITIVE: number;
export declare let crypto_pwhash_PASSWD_MAX: number;
export declare let crypto_pwhash_PASSWD_MIN: number;
export declare let crypto_pwhash_SALTBYTES: number;
export declare let crypto_pwhash_STRBYTES: number;
export declare let crypto_scalarmult_BYTES: number;
export declare let crypto_scalarmult_SCALARBYTES: number;
export declare let crypto_secretbox_KEYBYTES: number;
export declare let crypto_secretbox_MACBYTES: number;
export declare let crypto_secretbox_MESSAGEBYTES_MAX: number;
export declare let crypto_secretbox_NONCEBYTES: number;
export declare let crypto_secretstream_xchacha20poly1305_ABYTES: number;
export declare let crypto_secretstream_xchacha20poly1305_HEADERBYTES: number;
export declare let crypto_secretstream_xchacha20poly1305_KEYBYTES: number;
export declare let crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX: number;
export declare let crypto_secretstream_xchacha20poly1305_TAG_FINAL: number;
export declare let crypto_secretstream_xchacha20poly1305_TAG_MESSAGE: number;
export declare let crypto_secretstream_xchacha20poly1305_TAG_PUSH: number;
export declare let crypto_secretstream_xchacha20poly1305_TAG_REKEY: number;
export declare let crypto_shorthash_BYTES: number;
export declare let crypto_shorthash_KEYBYTES: number;
export declare let crypto_sign_BYTES: number;
export declare let crypto_sign_MESSAGEBYTES_MAX: number;
export declare let crypto_sign_PUBLICKEYBYTES: number;
export declare let crypto_sign_SECRETKEYBYTES: number;
export declare let crypto_sign_SEEDBYTES: number;
export declare let SODIUM_VERSION_STRING: string;
export declare let crypto_pwhash_STRPREFIX: string;
export declare let _unstable_crypto_kdf_hkdf_sha256_BYTES_MAX: number;
export declare let _unstable_crypto_kdf_hkdf_sha256_BYTES_MIN: number;
export declare let _unstable_crypto_kdf_hkdf_sha256_KEYBYTES: number;
export declare let _unstable_crypto_kdf_hkdf_sha256_extract: (key: Uint8Array, salt: Uint8Array) => Uint8Array;
export declare let _unstable_crypto_kdf_hkdf_sha256_expand: (key: Uint8Array, info: string, length: number) => Uint8Array;
//# sourceMappingURL=lib.d.ts.map