{"version":3,"sources":["../src/index.ts","../src/hooks/useAbstraxionAccount.ts","../src/components/AbstraxionContext/index.tsx","../src/strategies/index.ts","../src/hooks/useAbstraxionClient.ts","../src/hooks/useAbstraxionSigningClient.ts"],"sourcesContent":["export * from \"./hooks\";\nexport * from \"./strategies\";\nexport * from \"./components/AbstraxionContext\";\n","import { useContext } from \"react\";\nimport { AbstraxionContext } from \"../components/AbstraxionContext\";\n\nexport interface AbstraxionAccount {\n  bech32Address: string;\n}\n\nexport interface AbstraxionAccountState {\n  data: AbstraxionAccount;\n  isConnected: boolean;\n  isConnecting: boolean;\n  login: () => Promise<void>;\n  logout: () => void;\n}\n\nexport const useAbstraxionAccount = (): AbstraxionAccountState => {\n  const { isConnected, granterAddress, isConnecting, login, logout } =\n    useContext(AbstraxionContext);\n\n  return {\n    data: {\n      bech32Address: granterAddress,\n    },\n    isConnected,\n    isConnecting,\n    login,\n    logout,\n  };\n};\n","import type { ReactNode } from \"react\";\nimport { createContext, useCallback, useEffect, useState } from \"react\";\nimport { testnetChainInfo, xionGasValues } from \"@burnt-labs/constants\";\nimport { GasPrice } from \"@cosmjs/stargate\";\nimport { SignArbSecp256k1HdWallet } from \"@burnt-labs/abstraxion-core\";\nimport { AbstraxionAuth } from \"@burnt-labs/abstraxion-core\";\nimport {\n  ReactNativeRedirectStrategy,\n  ReactNativeStorageStrategy,\n} from \"../../strategies\";\n\nexport const abstraxionAuth = new AbstraxionAuth(\n  new ReactNativeStorageStrategy(),\n  new ReactNativeRedirectStrategy(),\n);\n\nexport type SpendLimit = { denom: string; amount: string };\n\nexport type ContractGrantDescription =\n  | string\n  | {\n      address: string;\n      amounts: SpendLimit[];\n    };\n\nexport interface AbstraxionContextProps {\n  isConnected: boolean;\n  setIsConnected: React.Dispatch<React.SetStateAction<boolean>>;\n  isConnecting: boolean;\n  setIsConnecting: React.Dispatch<React.SetStateAction<boolean>>;\n  abstraxionError: string;\n  setAbstraxionError: React.Dispatch<React.SetStateAction<string>>;\n  abstraxionAccount: SignArbSecp256k1HdWallet | undefined;\n  setAbstraxionAccount: React.Dispatch<SignArbSecp256k1HdWallet | undefined>;\n  granterAddress: string;\n  setGranterAddress: React.Dispatch<React.SetStateAction<string>>;\n  contracts?: ContractGrantDescription[];\n  dashboardUrl?: string;\n  setDashboardUrl: React.Dispatch<React.SetStateAction<string>>;\n  rpcUrl: string;\n  restUrl: string;\n  stake?: boolean;\n  bank?: SpendLimit[];\n  treasury?: string;\n  gasPrice: GasPrice;\n  logout: () => void;\n  login: () => Promise<void>;\n}\n\nexport interface AbstraxionConfig {\n  contracts?: ContractGrantDescription[];\n  rpcUrl?: string;\n  restUrl?: string;\n  stake?: boolean;\n  bank?: SpendLimit[];\n  callbackUrl?: string;\n  treasury?: string;\n  gasPrice?: string;\n}\n\nexport function AbstraxionProvider({\n  children,\n  config: {\n    contracts,\n    rpcUrl = testnetChainInfo.rpc,\n    restUrl = testnetChainInfo.rest,\n    stake = false,\n    bank,\n    callbackUrl,\n    treasury,\n    gasPrice,\n  },\n}: {\n  children: React.ReactNode;\n  config: AbstraxionConfig;\n}): JSX.Element {\n  const [abstraxionError, setAbstraxionError] = useState(\"\");\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [abstraxionAccount, setAbstraxionAccount] = useState<\n    SignArbSecp256k1HdWallet | undefined\n  >(undefined);\n  const [granterAddress, setGranterAddress] = useState(\"\");\n  const [dashboardUrl, setDashboardUrl] = useState(\"\");\n  let gasPriceDefault: GasPrice;\n  const { gasPrice: gasPriceConstant } = xionGasValues;\n  if (rpcUrl.includes(\"mainnet\")) {\n    gasPriceDefault = GasPrice.fromString(gasPriceConstant);\n  } else {\n    gasPriceDefault = GasPrice.fromString(\"0.001uxion\");\n  }\n\n  const configureInstance = useCallback(() => {\n    abstraxionAuth.configureAbstraxionInstance(\n      rpcUrl,\n      restUrl || \"\",\n      contracts,\n      stake,\n      bank,\n      callbackUrl,\n      treasury,\n    );\n  }, [rpcUrl, restUrl, contracts, stake, bank, callbackUrl, treasury]);\n\n  useEffect(() => {\n    configureInstance();\n  }, [configureInstance]);\n\n  useEffect(() => {\n    const unsubscribe = abstraxionAuth.subscribeToAuthStateChange(\n      async (newState: boolean) => {\n        if (newState !== isConnected) {\n          setIsConnected(newState);\n          if (newState) {\n            const account = await abstraxionAuth.getLocalKeypair();\n            const granterAddress = await abstraxionAuth.getGranter();\n            setAbstraxionAccount(account);\n            setGranterAddress(granterAddress);\n          }\n        }\n      },\n    );\n\n    return () => {\n      unsubscribe?.();\n    };\n  }, [isConnected, abstraxionAuth]);\n\n  const persistAuthenticateState = useCallback(async () => {\n    await abstraxionAuth.authenticate();\n  }, [abstraxionAuth]);\n\n  useEffect(() => {\n    if (!isConnecting && !abstraxionAccount && !granterAddress) {\n      persistAuthenticateState();\n    }\n  }, [\n    isConnecting,\n    abstraxionAccount,\n    granterAddress,\n    persistAuthenticateState,\n  ]);\n\n  async function login() {\n    try {\n      setIsConnecting(true);\n      await abstraxionAuth.login();\n    } catch (error) {\n      console.log(error);\n      throw error; // Re-throw to allow handling by the caller\n    } finally {\n      setIsConnecting(false);\n    }\n  }\n\n  const logout = useCallback(() => {\n    setIsConnected(false);\n    setAbstraxionAccount(undefined);\n    setGranterAddress(\"\");\n    abstraxionAuth?.logout();\n  }, [abstraxionAuth]);\n\n  return (\n    <AbstraxionContext.Provider\n      value={{\n        isConnected,\n        setIsConnected,\n        isConnecting,\n        setIsConnecting,\n        abstraxionError,\n        setAbstraxionError,\n        abstraxionAccount,\n        setAbstraxionAccount,\n        granterAddress,\n        setGranterAddress,\n        contracts,\n        dashboardUrl,\n        setDashboardUrl,\n        rpcUrl,\n        restUrl,\n        stake,\n        bank,\n        treasury,\n        logout,\n        login,\n        gasPrice: gasPrice ? GasPrice.fromString(gasPrice) : gasPriceDefault,\n      }}\n    >\n      {children}\n    </AbstraxionContext.Provider>\n  );\n}\n\nexport const AbstraxionContext = createContext<AbstraxionContextProps>(\n  {} as AbstraxionContextProps,\n);\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport * as Linking from \"expo-linking\";\nimport { StorageStrategy, RedirectStrategy } from \"@burnt-labs/abstraxion-core\";\n\n/**\n * React Native implementation of the StorageStrategy using AsyncStorage\n */\nexport class ReactNativeStorageStrategy implements StorageStrategy {\n  async getItem(key: string): Promise<string | null> {\n    try {\n      return await AsyncStorage.getItem(key);\n    } catch (error) {\n      console.error(\"AsyncStorage getItem error:\", error);\n      return null;\n    }\n  }\n\n  async setItem(key: string, value: string): Promise<void> {\n    try {\n      await AsyncStorage.setItem(key, value);\n    } catch (error) {\n      console.error(\"AsyncStorage setItem error:\", error);\n    }\n  }\n\n  async removeItem(key: string): Promise<void> {\n    try {\n      await AsyncStorage.removeItem(key);\n    } catch (error) {\n      console.error(\"AsyncStorage removeItem error:\", error);\n    }\n  }\n}\n\n/**\n * React Native implementation of the RedirectStrategy using Expo WebBrowser\n */\nexport class ReactNativeRedirectStrategy implements RedirectStrategy {\n  private redirectCallback?: (params: { granter?: string | null }) => void;\n\n  async getCurrentUrl(): Promise<string> {\n    return Linking.createURL(\"\");\n  }\n\n  async redirect(url: string): Promise<void> {\n    try {\n      const result = await WebBrowser.openAuthSessionAsync(\n        url,\n        Linking.createURL(\"\"),\n      );\n\n      if (result.type === \"cancel\" || result.type === \"dismiss\") {\n        throw new Error(\"Authentication session was cancelled\");\n      }\n\n      if (result.type === \"success\" && result.url && this.redirectCallback) {\n        const { queryParams } = Linking.parse(result.url);\n        this.redirectCallback({\n          granter: queryParams?.granter?.toString() || null,\n        });\n      }\n    } catch (error) {\n      console.error(\"Error during authentication:\", error);\n      throw error;\n    }\n  }\n\n  async onRedirectComplete(\n    callback: (params: { granter?: string | null }) => void,\n  ): Promise<void> {\n    this.redirectCallback = callback;\n  }\n\n  async removeRedirectHandler(): Promise<void> {\n    this.redirectCallback = undefined;\n  }\n\n  async getUrlParameter(param: string): Promise<string | null> {\n    try {\n      const url = await Linking.getInitialURL();\n      if (!url) return null;\n      const { queryParams } = Linking.parse(url);\n      return queryParams?.[param]?.toString() || null;\n    } catch (error) {\n      console.error(\"Error getting URL parameter:\", error);\n      return null;\n    }\n  }\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { testnetChainInfo } from \"@burnt-labs/constants\";\nimport { AbstraxionContext } from \"../components/AbstraxionContext\";\nimport { CosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\n\nexport const useAbstraxionClient = (): {\n  readonly client: CosmWasmClient | undefined;\n} => {\n  const { rpcUrl } = useContext(AbstraxionContext);\n\n  const [abstractClient, setAbstractClient] = useState<\n    CosmWasmClient | undefined\n  >(undefined);\n\n  useEffect(() => {\n    async function getClient() {\n      try {\n        const client = await CosmWasmClient.connect(\n          // Should be set in the context but defaulting here just in case\n          rpcUrl || testnetChainInfo.rpc,\n        );\n\n        setAbstractClient(client);\n      } catch (error) {\n        setAbstractClient(undefined);\n      }\n    }\n\n    getClient();\n  }, [rpcUrl]);\n\n  return {\n    client: abstractClient,\n  } as const;\n};\n","import { useContext, useEffect, useState } from \"react\";\nimport { testnetChainInfo } from \"@burnt-labs/constants\";\nimport {\n  GranteeSignerClient,\n  SignArbSecp256k1HdWallet,\n} from \"@burnt-labs/abstraxion-core\";\nimport {\n  AbstraxionContext,\n  abstraxionAuth,\n} from \"../components/AbstraxionContext\";\n\nexport const useAbstraxionSigningClient = (): {\n  readonly client: GranteeSignerClient | undefined;\n  readonly signArb:\n    | ((signerAddress: string, message: string | Uint8Array) => Promise<string>)\n    | undefined;\n} => {\n  const {\n    isConnected,\n    abstraxionAccount,\n    granterAddress,\n    rpcUrl,\n    gasPrice,\n    treasury,\n  } = useContext(AbstraxionContext);\n  const [signArbWallet, setSignArbWallet] = useState<\n    SignArbSecp256k1HdWallet | undefined\n  >(undefined);\n\n  const [abstractClient, setAbstractClient] = useState<\n    GranteeSignerClient | undefined\n  >(undefined);\n\n  useEffect(() => {\n    async function getSigner() {\n      try {\n        if (!abstraxionAccount) {\n          throw new Error(\"No account found.\");\n        }\n\n        if (!granterAddress) {\n          throw new Error(\"No granter found.\");\n        }\n\n        const granteeAddress = await abstraxionAccount\n          .getAccounts()\n          .then((accounts) => {\n            if (accounts.length === 0) {\n              throw new Error(\"No account found.\");\n            }\n            return accounts[0].address;\n          });\n\n        const directClient = await GranteeSignerClient.connectWithSigner(\n          // Should be set in the context but defaulting here just in case\n          rpcUrl || testnetChainInfo.rpc,\n          abstraxionAccount,\n          {\n            gasPrice,\n            granterAddress,\n            granteeAddress,\n            treasuryAddress: treasury,\n          },\n        );\n\n        const wallet = await abstraxionAuth.getLocalKeypair();\n        if (wallet) {\n          setSignArbWallet(wallet);\n        }\n\n        setAbstractClient(directClient);\n      } catch (error) {\n        setAbstractClient(undefined);\n      }\n    }\n\n    getSigner();\n  }, [isConnected, abstraxionAccount, granterAddress, abstraxionAuth]);\n\n  return {\n    client: abstractClient,\n    signArb: signArbWallet?.signArb,\n  } as const;\n};\n"],"mappings":"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","names":["import_react","AsyncStorage","granterAddress","import_react","import_constants","import_react","import_constants","import_abstraxion_core"]}