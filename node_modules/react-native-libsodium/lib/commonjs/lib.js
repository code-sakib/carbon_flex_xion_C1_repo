"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.crypto_kx_keypair = exports.crypto_kx_client_session_keys = exports.crypto_kx_SESSIONKEYBYTES = exports.crypto_kx_SEEDBYTES = exports.crypto_kx_SECRETKEYBYTES = exports.crypto_kx_PUBLICKEYBYTES = exports.crypto_kdf_keygen = exports.crypto_kdf_derive_from_key = exports.crypto_kdf_KEYBYTES = exports.crypto_kdf_CONTEXTBYTES = exports.crypto_kdf_BYTES_MIN = exports.crypto_kdf_BYTES_MAX = exports.crypto_hash_BYTES = exports.crypto_hash = exports.crypto_generichash_update = exports.crypto_generichash_keygen = exports.crypto_generichash_init = exports.crypto_generichash_final = exports.crypto_generichash_KEYBYTES_MIN = exports.crypto_generichash_KEYBYTES_MAX = exports.crypto_generichash_KEYBYTES = exports.crypto_generichash_BYTES_MIN = exports.crypto_generichash_BYTES_MAX = exports.crypto_generichash_BYTES = exports.crypto_generichash = exports.crypto_box_seed_keypair = exports.crypto_box_seal_open = exports.crypto_box_seal = exports.crypto_box_open_easy_afternm = exports.crypto_box_open_easy = exports.crypto_box_open_detached = exports.crypto_box_keypair = exports.crypto_box_easy_afternm = exports.crypto_box_easy = exports.crypto_box_detached = exports.crypto_box_beforenm = exports.crypto_box_SEEDBYTES = exports.crypto_box_SECRETKEYBYTES = exports.crypto_box_SEALBYTES = exports.crypto_box_PUBLICKEYBYTES = exports.crypto_box_NONCEBYTES = exports.crypto_box_MESSAGEBYTES_MAX = exports.crypto_box_MACBYTES = exports.crypto_box_BEFORENMBYTES = exports.crypto_auth_verify = exports.crypto_auth_keygen = exports.crypto_auth_KEYBYTES = exports.crypto_auth_BYTES = exports.crypto_auth = exports.crypto_aead_xchacha20poly1305_ietf_keygen = exports.crypto_aead_xchacha20poly1305_ietf_encrypt_detached = exports.crypto_aead_xchacha20poly1305_ietf_encrypt = exports.crypto_aead_xchacha20poly1305_ietf_decrypt_detached = exports.crypto_aead_xchacha20poly1305_ietf_decrypt = exports.crypto_aead_xchacha20poly1305_ietf_NSECBYTES = exports.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES = exports.crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX = exports.crypto_aead_xchacha20poly1305_ietf_KEYBYTES = exports.crypto_aead_xchacha20poly1305_ietf_ABYTES = exports.crypto_aead_xchacha20poly1305_IETF_NSECBYTES = exports.crypto_aead_xchacha20poly1305_IETF_NPUBBYTES = exports.crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX = exports.crypto_aead_xchacha20poly1305_IETF_KEYBYTES = exports.crypto_aead_xchacha20poly1305_IETF_ABYTES = exports.crypto_aead_chacha20poly1305_keygen = exports.crypto_aead_chacha20poly1305_ietf_keygen = exports.crypto_aead_chacha20poly1305_ietf_encrypt_detached = exports.crypto_aead_chacha20poly1305_ietf_encrypt = exports.crypto_aead_chacha20poly1305_ietf_decrypt_detached = exports.crypto_aead_chacha20poly1305_ietf_decrypt = exports.crypto_aead_chacha20poly1305_ietf_NSECBYTES = exports.crypto_aead_chacha20poly1305_ietf_NPUBBYTES = exports.crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = exports.crypto_aead_chacha20poly1305_ietf_KEYBYTES = exports.crypto_aead_chacha20poly1305_ietf_ABYTES = exports.crypto_aead_chacha20poly1305_encrypt_detached = exports.crypto_aead_chacha20poly1305_encrypt = exports.crypto_aead_chacha20poly1305_decrypt_detached = exports.crypto_aead_chacha20poly1305_decrypt = exports.crypto_aead_chacha20poly1305_NSECBYTES = exports.crypto_aead_chacha20poly1305_NPUBBYTES = exports.crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX = exports.crypto_aead_chacha20poly1305_KEYBYTES = exports.crypto_aead_chacha20poly1305_IETF_NSECBYTES = exports.crypto_aead_chacha20poly1305_IETF_NPUBBYTES = exports.crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX = exports.crypto_aead_chacha20poly1305_IETF_KEYBYTES = exports.crypto_aead_chacha20poly1305_IETF_ABYTES = exports.crypto_aead_chacha20poly1305_ABYTES = exports.compare = exports.base64_variants = exports.add = exports._unstable_crypto_kdf_hkdf_sha256_extract = exports._unstable_crypto_kdf_hkdf_sha256_expand = exports._unstable_crypto_kdf_hkdf_sha256_KEYBYTES = exports._unstable_crypto_kdf_hkdf_sha256_BYTES_MIN = exports._unstable_crypto_kdf_hkdf_sha256_BYTES_MAX = exports.SODIUM_VERSION_STRING = exports.SODIUM_LIBRARY_VERSION_MINOR = exports.SODIUM_LIBRARY_VERSION_MAJOR = void 0;
exports.unpad = exports.to_string = exports.to_hex = exports.to_base64 = exports.symbols = exports.sodium_version_string = exports.ready = exports.randombytes_uniform = exports.randombytes_stir = exports.randombytes_random = exports.randombytes_close = exports.randombytes_buf_deterministic = exports.randombytes_buf = exports.pad = exports.output_formats = exports.memzero = exports.memcmp = exports.loadSumoVersion = exports.libsodium = exports.is_zero = exports.increment = exports.from_string = exports.from_hex = exports.from_base64 = exports.default = exports.crypto_sign_verify_detached = exports.crypto_sign_update = exports.crypto_sign_seed_keypair = exports.crypto_sign_open = exports.crypto_sign_keypair = exports.crypto_sign_init = exports.crypto_sign_final_verify = exports.crypto_sign_final_create = exports.crypto_sign_ed25519_sk_to_curve25519 = exports.crypto_sign_ed25519_pk_to_curve25519 = exports.crypto_sign_detached = exports.crypto_sign_SEEDBYTES = exports.crypto_sign_SECRETKEYBYTES = exports.crypto_sign_PUBLICKEYBYTES = exports.crypto_sign_MESSAGEBYTES_MAX = exports.crypto_sign_BYTES = exports.crypto_sign = exports.crypto_shorthash_keygen = exports.crypto_shorthash_KEYBYTES = exports.crypto_shorthash_BYTES = exports.crypto_shorthash = exports.crypto_secretstream_xchacha20poly1305_rekey = exports.crypto_secretstream_xchacha20poly1305_push = exports.crypto_secretstream_xchacha20poly1305_pull = exports.crypto_secretstream_xchacha20poly1305_keygen = exports.crypto_secretstream_xchacha20poly1305_init_push = exports.crypto_secretstream_xchacha20poly1305_init_pull = exports.crypto_secretstream_xchacha20poly1305_TAG_REKEY = exports.crypto_secretstream_xchacha20poly1305_TAG_PUSH = exports.crypto_secretstream_xchacha20poly1305_TAG_MESSAGE = exports.crypto_secretstream_xchacha20poly1305_TAG_FINAL = exports.crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX = exports.crypto_secretstream_xchacha20poly1305_KEYBYTES = exports.crypto_secretstream_xchacha20poly1305_HEADERBYTES = exports.crypto_secretstream_xchacha20poly1305_ABYTES = exports.crypto_secretbox_open_easy = exports.crypto_secretbox_open_detached = exports.crypto_secretbox_keygen = exports.crypto_secretbox_easy = exports.crypto_secretbox_detached = exports.crypto_secretbox_NONCEBYTES = exports.crypto_secretbox_MESSAGEBYTES_MAX = exports.crypto_secretbox_MACBYTES = exports.crypto_secretbox_KEYBYTES = exports.crypto_scalarmult_base = exports.crypto_scalarmult_SCALARBYTES = exports.crypto_scalarmult_BYTES = exports.crypto_scalarmult = exports.crypto_pwhash_str_verify = exports.crypto_pwhash_str_needs_rehash = exports.crypto_pwhash_str = exports.crypto_pwhash_STRPREFIX = exports.crypto_pwhash_STRBYTES = exports.crypto_pwhash_SALTBYTES = exports.crypto_pwhash_PASSWD_MIN = exports.crypto_pwhash_PASSWD_MAX = exports.crypto_pwhash_OPSLIMIT_SENSITIVE = exports.crypto_pwhash_OPSLIMIT_MODERATE = exports.crypto_pwhash_OPSLIMIT_MIN = exports.crypto_pwhash_OPSLIMIT_MAX = exports.crypto_pwhash_OPSLIMIT_INTERACTIVE = exports.crypto_pwhash_MEMLIMIT_SENSITIVE = exports.crypto_pwhash_MEMLIMIT_MODERATE = exports.crypto_pwhash_MEMLIMIT_MIN = exports.crypto_pwhash_MEMLIMIT_MAX = exports.crypto_pwhash_MEMLIMIT_INTERACTIVE = exports.crypto_pwhash_BYTES_MIN = exports.crypto_pwhash_BYTES_MAX = exports.crypto_pwhash_ALG_DEFAULT = exports.crypto_pwhash_ALG_ARGON2ID13 = exports.crypto_pwhash_ALG_ARGON2I13 = exports.crypto_pwhash = exports.crypto_kx_server_session_keys = exports.crypto_kx_seed_keypair = void 0;
var hkdf = _interopRequireWildcard(require("@noble/hashes/hkdf"));
var _sha = require("@noble/hashes/sha256");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
let isLoadSumoVersion = false;
const loadSumoVersion = () => {
  isLoadSumoVersion = true;
};
exports.loadSumoVersion = loadSumoVersion;
let lib;

// @ts-expect-error this is a proxy and basically can fail if loading is not complete
let sodium = new Proxy({}, {
  get(_, prop) {
    if (prop === 'loadSumoVersion') {
      return loadSumoVersion;
    }
    if (prop === 'ready') {
      return ready;
    }
    if (lib) {
      // @ts-expect-error
      return lib[prop];
    }
    return undefined;
  }
});
const ready = new Promise(async resolve => {
  // wait for next tick to allow loadSumoVersion to be called
  await new Promise(r => setTimeout(r, 0));
  if (isLoadSumoVersion) {
    lib = (await Promise.resolve().then(() => _interopRequireWildcard(require('libsodium-wrappers-sumo')))).default;
  } else {
    lib = (await Promise.resolve().then(() => _interopRequireWildcard(require('libsodium-wrappers')))).default;
  }
  await lib.ready;
  // only after ready the lib is available
  if (isLoadSumoVersion) {
    lib = (await Promise.resolve().then(() => _interopRequireWildcard(require('libsodium-wrappers-sumo')))).default;
  } else {
    lib = (await Promise.resolve().then(() => _interopRequireWildcard(require('libsodium-wrappers')))).default;
  }

  // get all keys
  // console.log(JSON.stringify(Object.keys(sodium)));

  exports.add = add = lib.add;
  exports.base64_variants = base64_variants = lib.base64_variants;
  exports.compare = compare = lib.compare;
  exports.from_base64 = from_base64 = lib.from_base64;
  exports.from_hex = from_hex = lib.from_hex;
  exports.from_string = from_string = lib.from_string;
  exports.increment = increment = lib.increment;
  exports.is_zero = is_zero = lib.is_zero;
  // @ts-ignore
  exports.libsodium = libsodium = lib.libsodium;
  exports.memcmp = memcmp = lib.memcmp;
  exports.memzero = memzero = lib.memzero;
  exports.output_formats = output_formats = lib.output_formats;
  exports.pad = pad = lib.pad;
  exports.unpad = unpad = lib.unpad;
  exports.symbols = symbols = lib.symbols;
  exports.to_base64 = to_base64 = lib.to_base64;
  exports.to_hex = to_hex = lib.to_hex;
  exports.to_string = to_string = lib.to_string;
  exports.crypto_aead_chacha20poly1305_decrypt = crypto_aead_chacha20poly1305_decrypt = lib.crypto_aead_chacha20poly1305_decrypt;
  exports.crypto_aead_chacha20poly1305_decrypt_detached = crypto_aead_chacha20poly1305_decrypt_detached = lib.crypto_aead_chacha20poly1305_decrypt_detached;
  exports.crypto_aead_chacha20poly1305_encrypt = crypto_aead_chacha20poly1305_encrypt = lib.crypto_aead_chacha20poly1305_encrypt;
  exports.crypto_aead_chacha20poly1305_encrypt_detached = crypto_aead_chacha20poly1305_encrypt_detached = lib.crypto_aead_chacha20poly1305_encrypt_detached;
  exports.crypto_aead_chacha20poly1305_ietf_decrypt = crypto_aead_chacha20poly1305_ietf_decrypt = lib.crypto_aead_chacha20poly1305_ietf_decrypt;
  exports.crypto_aead_chacha20poly1305_ietf_decrypt_detached = crypto_aead_chacha20poly1305_ietf_decrypt_detached = lib.crypto_aead_chacha20poly1305_ietf_decrypt_detached;
  exports.crypto_aead_chacha20poly1305_ietf_encrypt = crypto_aead_chacha20poly1305_ietf_encrypt = lib.crypto_aead_chacha20poly1305_ietf_encrypt;
  exports.crypto_aead_chacha20poly1305_ietf_encrypt_detached = crypto_aead_chacha20poly1305_ietf_encrypt_detached = lib.crypto_aead_chacha20poly1305_ietf_encrypt_detached;
  exports.crypto_aead_chacha20poly1305_ietf_keygen = crypto_aead_chacha20poly1305_ietf_keygen = lib.crypto_aead_chacha20poly1305_ietf_keygen;
  exports.crypto_aead_chacha20poly1305_keygen = crypto_aead_chacha20poly1305_keygen = lib.crypto_aead_chacha20poly1305_keygen;
  exports.crypto_aead_xchacha20poly1305_ietf_decrypt = crypto_aead_xchacha20poly1305_ietf_decrypt = lib.crypto_aead_xchacha20poly1305_ietf_decrypt;
  exports.crypto_aead_xchacha20poly1305_ietf_decrypt_detached = crypto_aead_xchacha20poly1305_ietf_decrypt_detached = lib.crypto_aead_xchacha20poly1305_ietf_decrypt_detached;
  exports.crypto_aead_xchacha20poly1305_ietf_encrypt = crypto_aead_xchacha20poly1305_ietf_encrypt = lib.crypto_aead_xchacha20poly1305_ietf_encrypt;
  exports.crypto_aead_xchacha20poly1305_ietf_encrypt_detached = crypto_aead_xchacha20poly1305_ietf_encrypt_detached = lib.crypto_aead_xchacha20poly1305_ietf_encrypt_detached;
  exports.crypto_aead_xchacha20poly1305_ietf_keygen = crypto_aead_xchacha20poly1305_ietf_keygen = lib.crypto_aead_xchacha20poly1305_ietf_keygen;
  exports.crypto_auth = crypto_auth = lib.crypto_auth;
  exports.crypto_auth_keygen = crypto_auth_keygen = lib.crypto_auth_keygen;
  exports.crypto_auth_verify = crypto_auth_verify = lib.crypto_auth_verify;
  exports.crypto_box_beforenm = crypto_box_beforenm = lib.crypto_box_beforenm;
  exports.crypto_box_detached = crypto_box_detached = lib.crypto_box_detached;
  exports.crypto_box_easy = crypto_box_easy = lib.crypto_box_easy;
  exports.crypto_box_easy_afternm = crypto_box_easy_afternm = lib.crypto_box_easy_afternm;
  exports.crypto_box_keypair = crypto_box_keypair = lib.crypto_box_keypair;
  exports.crypto_box_seed_keypair = crypto_box_seed_keypair = lib.crypto_box_seed_keypair;
  exports.crypto_box_open_detached = crypto_box_open_detached = lib.crypto_box_open_detached;
  exports.crypto_box_open_easy = crypto_box_open_easy = lib.crypto_box_open_easy;
  exports.crypto_box_open_easy_afternm = crypto_box_open_easy_afternm = lib.crypto_box_open_easy_afternm;
  exports.crypto_box_seal = crypto_box_seal = lib.crypto_box_seal;
  exports.crypto_box_seal_open = crypto_box_seal_open = lib.crypto_box_seal_open;
  exports.crypto_box_seed_keypair = crypto_box_seed_keypair = lib.crypto_box_seed_keypair;
  exports.crypto_generichash = crypto_generichash = lib.crypto_generichash;
  exports.crypto_generichash_final = crypto_generichash_final = lib.crypto_generichash_final;
  exports.crypto_generichash_init = crypto_generichash_init = lib.crypto_generichash_init;
  exports.crypto_generichash_keygen = crypto_generichash_keygen = lib.crypto_generichash_keygen;
  exports.crypto_generichash_update = crypto_generichash_update = lib.crypto_generichash_update;
  exports.crypto_hash = crypto_hash = lib.crypto_hash;
  exports.crypto_kdf_derive_from_key = crypto_kdf_derive_from_key = lib.crypto_kdf_derive_from_key;
  exports.crypto_kdf_keygen = crypto_kdf_keygen = lib.crypto_kdf_keygen;
  exports.crypto_kx_client_session_keys = crypto_kx_client_session_keys = lib.crypto_kx_client_session_keys;
  exports.crypto_kx_keypair = crypto_kx_keypair = lib.crypto_kx_keypair;
  exports.crypto_kx_seed_keypair = crypto_kx_seed_keypair = lib.crypto_kx_seed_keypair;
  exports.crypto_kx_server_session_keys = crypto_kx_server_session_keys = lib.crypto_kx_server_session_keys;
  exports.crypto_pwhash = crypto_pwhash = lib.crypto_pwhash;
  exports.crypto_pwhash_str = crypto_pwhash_str = lib.crypto_pwhash_str;
  exports.crypto_pwhash_str_needs_rehash = crypto_pwhash_str_needs_rehash = lib.crypto_pwhash_str_needs_rehash;
  exports.crypto_pwhash_str_verify = crypto_pwhash_str_verify = lib.crypto_pwhash_str_verify;
  exports.crypto_scalarmult = crypto_scalarmult = lib.crypto_scalarmult;
  exports.crypto_scalarmult_base = crypto_scalarmult_base = lib.crypto_scalarmult_base;
  exports.crypto_secretbox_detached = crypto_secretbox_detached = lib.crypto_secretbox_detached;
  exports.crypto_secretbox_easy = crypto_secretbox_easy = lib.crypto_secretbox_easy;
  exports.crypto_secretbox_keygen = crypto_secretbox_keygen = lib.crypto_secretbox_keygen;
  exports.crypto_secretbox_open_detached = crypto_secretbox_open_detached = lib.crypto_secretbox_open_detached;
  exports.crypto_secretbox_open_easy = crypto_secretbox_open_easy = lib.crypto_secretbox_open_easy;
  exports.crypto_secretstream_xchacha20poly1305_init_pull = crypto_secretstream_xchacha20poly1305_init_pull = lib.crypto_secretstream_xchacha20poly1305_init_pull;
  exports.crypto_secretstream_xchacha20poly1305_init_push = crypto_secretstream_xchacha20poly1305_init_push = lib.crypto_secretstream_xchacha20poly1305_init_push;
  exports.crypto_secretstream_xchacha20poly1305_keygen = crypto_secretstream_xchacha20poly1305_keygen = lib.crypto_secretstream_xchacha20poly1305_keygen;
  exports.crypto_secretstream_xchacha20poly1305_pull = crypto_secretstream_xchacha20poly1305_pull = lib.crypto_secretstream_xchacha20poly1305_pull;
  exports.crypto_secretstream_xchacha20poly1305_push = crypto_secretstream_xchacha20poly1305_push = lib.crypto_secretstream_xchacha20poly1305_push;
  exports.crypto_secretstream_xchacha20poly1305_rekey = crypto_secretstream_xchacha20poly1305_rekey = lib.crypto_secretstream_xchacha20poly1305_rekey;
  exports.crypto_shorthash = crypto_shorthash = lib.crypto_shorthash;
  exports.crypto_shorthash_keygen = crypto_shorthash_keygen = lib.crypto_shorthash_keygen;
  exports.crypto_sign = crypto_sign = lib.crypto_sign;
  exports.crypto_sign_detached = crypto_sign_detached = lib.crypto_sign_detached;
  exports.crypto_sign_ed25519_pk_to_curve25519 = crypto_sign_ed25519_pk_to_curve25519 = lib.crypto_sign_ed25519_pk_to_curve25519;
  exports.crypto_sign_ed25519_sk_to_curve25519 = crypto_sign_ed25519_sk_to_curve25519 = lib.crypto_sign_ed25519_sk_to_curve25519;
  exports.crypto_sign_final_create = crypto_sign_final_create = lib.crypto_sign_final_create;
  exports.crypto_sign_final_verify = crypto_sign_final_verify = lib.crypto_sign_final_verify;
  exports.crypto_sign_init = crypto_sign_init = lib.crypto_sign_init;
  exports.crypto_sign_keypair = crypto_sign_keypair = lib.crypto_sign_keypair;
  exports.crypto_sign_open = crypto_sign_open = lib.crypto_sign_open;
  exports.crypto_sign_seed_keypair = crypto_sign_seed_keypair = lib.crypto_sign_seed_keypair;
  exports.crypto_sign_update = crypto_sign_update = lib.crypto_sign_update;
  exports.crypto_sign_verify_detached = crypto_sign_verify_detached = lib.crypto_sign_verify_detached;
  exports.randombytes_buf = randombytes_buf = lib.randombytes_buf;
  exports.randombytes_buf_deterministic = randombytes_buf_deterministic = lib.randombytes_buf_deterministic;
  exports.randombytes_close = randombytes_close = lib.randombytes_close;
  exports.randombytes_random = randombytes_random = lib.randombytes_random;
  exports.randombytes_stir = randombytes_stir = lib.randombytes_stir;
  exports.randombytes_uniform = randombytes_uniform = lib.randombytes_uniform;
  exports.sodium_version_string = sodium_version_string = lib.sodium_version_string;
  exports.SODIUM_LIBRARY_VERSION_MAJOR = SODIUM_LIBRARY_VERSION_MAJOR = lib.SODIUM_LIBRARY_VERSION_MAJOR;
  exports.SODIUM_LIBRARY_VERSION_MINOR = SODIUM_LIBRARY_VERSION_MINOR = lib.SODIUM_LIBRARY_VERSION_MINOR;
  exports.crypto_aead_chacha20poly1305_ABYTES = crypto_aead_chacha20poly1305_ABYTES = lib.crypto_aead_chacha20poly1305_ABYTES;
  exports.crypto_aead_chacha20poly1305_IETF_ABYTES = crypto_aead_chacha20poly1305_IETF_ABYTES = lib.crypto_aead_chacha20poly1305_IETF_ABYTES;
  exports.crypto_aead_chacha20poly1305_IETF_KEYBYTES = crypto_aead_chacha20poly1305_IETF_KEYBYTES = lib.crypto_aead_chacha20poly1305_IETF_KEYBYTES;
  exports.crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX = crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX = lib.crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX;
  exports.crypto_aead_chacha20poly1305_IETF_NPUBBYTES = crypto_aead_chacha20poly1305_IETF_NPUBBYTES = lib.crypto_aead_chacha20poly1305_IETF_NPUBBYTES;
  exports.crypto_aead_chacha20poly1305_IETF_NSECBYTES = crypto_aead_chacha20poly1305_IETF_NSECBYTES = lib.crypto_aead_chacha20poly1305_IETF_NSECBYTES;
  exports.crypto_aead_chacha20poly1305_KEYBYTES = crypto_aead_chacha20poly1305_KEYBYTES = lib.crypto_aead_chacha20poly1305_KEYBYTES;
  exports.crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX = crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX = lib.crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX;
  exports.crypto_aead_chacha20poly1305_NPUBBYTES = crypto_aead_chacha20poly1305_NPUBBYTES = lib.crypto_aead_chacha20poly1305_NPUBBYTES;
  exports.crypto_aead_chacha20poly1305_NSECBYTES = crypto_aead_chacha20poly1305_NSECBYTES = lib.crypto_aead_chacha20poly1305_NSECBYTES;
  exports.crypto_aead_chacha20poly1305_ietf_ABYTES = crypto_aead_chacha20poly1305_ietf_ABYTES = lib.crypto_aead_chacha20poly1305_ietf_ABYTES;
  exports.crypto_aead_chacha20poly1305_ietf_KEYBYTES = crypto_aead_chacha20poly1305_ietf_KEYBYTES = lib.crypto_aead_chacha20poly1305_ietf_KEYBYTES;
  exports.crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = lib.crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX;
  exports.crypto_aead_chacha20poly1305_ietf_NPUBBYTES = crypto_aead_chacha20poly1305_ietf_NPUBBYTES = lib.crypto_aead_chacha20poly1305_ietf_NPUBBYTES;
  exports.crypto_aead_chacha20poly1305_ietf_NSECBYTES = crypto_aead_chacha20poly1305_ietf_NSECBYTES = lib.crypto_aead_chacha20poly1305_ietf_NSECBYTES;
  exports.crypto_aead_xchacha20poly1305_IETF_ABYTES = crypto_aead_xchacha20poly1305_IETF_ABYTES = lib.crypto_aead_xchacha20poly1305_IETF_ABYTES;
  exports.crypto_aead_xchacha20poly1305_IETF_KEYBYTES = crypto_aead_xchacha20poly1305_IETF_KEYBYTES = lib.crypto_aead_xchacha20poly1305_IETF_KEYBYTES;
  exports.crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX = crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX = lib.crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX;
  exports.crypto_aead_xchacha20poly1305_IETF_NPUBBYTES = crypto_aead_xchacha20poly1305_IETF_NPUBBYTES = lib.crypto_aead_xchacha20poly1305_IETF_NPUBBYTES;
  exports.crypto_aead_xchacha20poly1305_IETF_NSECBYTES = crypto_aead_xchacha20poly1305_IETF_NSECBYTES = lib.crypto_aead_xchacha20poly1305_IETF_NSECBYTES;
  exports.crypto_aead_xchacha20poly1305_ietf_ABYTES = crypto_aead_xchacha20poly1305_ietf_ABYTES = lib.crypto_aead_xchacha20poly1305_ietf_ABYTES;
  exports.crypto_aead_xchacha20poly1305_ietf_KEYBYTES = crypto_aead_xchacha20poly1305_ietf_KEYBYTES = lib.crypto_aead_xchacha20poly1305_ietf_KEYBYTES;
  exports.crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX = crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX = lib.crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX;
  exports.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES = crypto_aead_xchacha20poly1305_ietf_NPUBBYTES = lib.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES;
  exports.crypto_aead_xchacha20poly1305_ietf_NSECBYTES = crypto_aead_xchacha20poly1305_ietf_NSECBYTES = lib.crypto_aead_xchacha20poly1305_ietf_NSECBYTES;
  exports.crypto_auth_BYTES = crypto_auth_BYTES = lib.crypto_auth_BYTES;
  exports.crypto_auth_KEYBYTES = crypto_auth_KEYBYTES = lib.crypto_auth_KEYBYTES;
  exports.crypto_box_BEFORENMBYTES = crypto_box_BEFORENMBYTES = lib.crypto_box_BEFORENMBYTES;
  exports.crypto_box_MACBYTES = crypto_box_MACBYTES = lib.crypto_box_MACBYTES;
  exports.crypto_box_MESSAGEBYTES_MAX = crypto_box_MESSAGEBYTES_MAX = lib.crypto_box_MESSAGEBYTES_MAX;
  exports.crypto_box_NONCEBYTES = crypto_box_NONCEBYTES = lib.crypto_box_NONCEBYTES;
  exports.crypto_box_PUBLICKEYBYTES = crypto_box_PUBLICKEYBYTES = lib.crypto_box_PUBLICKEYBYTES;
  exports.crypto_box_SEALBYTES = crypto_box_SEALBYTES = lib.crypto_box_SEALBYTES;
  exports.crypto_box_SECRETKEYBYTES = crypto_box_SECRETKEYBYTES = lib.crypto_box_SECRETKEYBYTES;
  exports.crypto_box_SEEDBYTES = crypto_box_SEEDBYTES = lib.crypto_box_SEEDBYTES;
  exports.crypto_generichash_BYTES = crypto_generichash_BYTES = lib.crypto_generichash_BYTES;
  exports.crypto_generichash_BYTES_MAX = crypto_generichash_BYTES_MAX = lib.crypto_generichash_BYTES_MAX;
  exports.crypto_generichash_BYTES_MIN = crypto_generichash_BYTES_MIN = lib.crypto_generichash_BYTES_MIN;
  exports.crypto_generichash_KEYBYTES = crypto_generichash_KEYBYTES = lib.crypto_generichash_KEYBYTES;
  exports.crypto_generichash_KEYBYTES_MAX = crypto_generichash_KEYBYTES_MAX = lib.crypto_generichash_KEYBYTES_MAX;
  exports.crypto_generichash_KEYBYTES_MIN = crypto_generichash_KEYBYTES_MIN = lib.crypto_generichash_KEYBYTES_MIN;
  exports.crypto_hash_BYTES = crypto_hash_BYTES = lib.crypto_hash_BYTES;
  exports.crypto_kdf_BYTES_MAX = crypto_kdf_BYTES_MAX = lib.crypto_kdf_BYTES_MAX;
  exports.crypto_kdf_BYTES_MIN = crypto_kdf_BYTES_MIN = lib.crypto_kdf_BYTES_MIN;
  exports.crypto_kdf_CONTEXTBYTES = crypto_kdf_CONTEXTBYTES = lib.crypto_kdf_CONTEXTBYTES;
  exports.crypto_kdf_KEYBYTES = crypto_kdf_KEYBYTES = lib.crypto_kdf_KEYBYTES;
  exports.crypto_kx_PUBLICKEYBYTES = crypto_kx_PUBLICKEYBYTES = lib.crypto_kx_PUBLICKEYBYTES;
  exports.crypto_kx_SECRETKEYBYTES = crypto_kx_SECRETKEYBYTES = lib.crypto_kx_SECRETKEYBYTES;
  exports.crypto_kx_SEEDBYTES = crypto_kx_SEEDBYTES = lib.crypto_kx_SEEDBYTES;
  exports.crypto_kx_SESSIONKEYBYTES = crypto_kx_SESSIONKEYBYTES = lib.crypto_kx_SESSIONKEYBYTES;
  exports.crypto_pwhash_ALG_ARGON2I13 = crypto_pwhash_ALG_ARGON2I13 = lib.crypto_pwhash_ALG_ARGON2I13;
  exports.crypto_pwhash_ALG_ARGON2ID13 = crypto_pwhash_ALG_ARGON2ID13 = lib.crypto_pwhash_ALG_ARGON2ID13;
  exports.crypto_pwhash_ALG_DEFAULT = crypto_pwhash_ALG_DEFAULT = lib.crypto_pwhash_ALG_DEFAULT;
  exports.crypto_pwhash_BYTES_MAX = crypto_pwhash_BYTES_MAX = lib.crypto_pwhash_BYTES_MAX;
  exports.crypto_pwhash_BYTES_MIN = crypto_pwhash_BYTES_MIN = lib.crypto_pwhash_BYTES_MIN;
  exports.crypto_pwhash_MEMLIMIT_INTERACTIVE = crypto_pwhash_MEMLIMIT_INTERACTIVE = lib.crypto_pwhash_MEMLIMIT_INTERACTIVE;
  exports.crypto_pwhash_MEMLIMIT_MAX = crypto_pwhash_MEMLIMIT_MAX = lib.crypto_pwhash_MEMLIMIT_MAX;
  exports.crypto_pwhash_MEMLIMIT_MIN = crypto_pwhash_MEMLIMIT_MIN = lib.crypto_pwhash_MEMLIMIT_MIN;
  exports.crypto_pwhash_MEMLIMIT_MODERATE = crypto_pwhash_MEMLIMIT_MODERATE = lib.crypto_pwhash_MEMLIMIT_MODERATE;
  exports.crypto_pwhash_MEMLIMIT_SENSITIVE = crypto_pwhash_MEMLIMIT_SENSITIVE = lib.crypto_pwhash_MEMLIMIT_SENSITIVE;
  exports.crypto_pwhash_OPSLIMIT_INTERACTIVE = crypto_pwhash_OPSLIMIT_INTERACTIVE = lib.crypto_pwhash_OPSLIMIT_INTERACTIVE;
  exports.crypto_pwhash_OPSLIMIT_MAX = crypto_pwhash_OPSLIMIT_MAX = lib.crypto_pwhash_OPSLIMIT_MAX;
  exports.crypto_pwhash_OPSLIMIT_MIN = crypto_pwhash_OPSLIMIT_MIN = lib.crypto_pwhash_OPSLIMIT_MIN;
  exports.crypto_pwhash_OPSLIMIT_MODERATE = crypto_pwhash_OPSLIMIT_MODERATE = lib.crypto_pwhash_OPSLIMIT_MODERATE;
  exports.crypto_pwhash_OPSLIMIT_SENSITIVE = crypto_pwhash_OPSLIMIT_SENSITIVE = lib.crypto_pwhash_OPSLIMIT_SENSITIVE;
  exports.crypto_pwhash_PASSWD_MAX = crypto_pwhash_PASSWD_MAX = lib.crypto_pwhash_PASSWD_MAX;
  exports.crypto_pwhash_PASSWD_MIN = crypto_pwhash_PASSWD_MIN = lib.crypto_pwhash_PASSWD_MIN;
  exports.crypto_pwhash_SALTBYTES = crypto_pwhash_SALTBYTES = lib.crypto_pwhash_SALTBYTES;
  exports.crypto_pwhash_STRBYTES = crypto_pwhash_STRBYTES = lib.crypto_pwhash_STRBYTES;
  exports.crypto_scalarmult_BYTES = crypto_scalarmult_BYTES = lib.crypto_scalarmult_BYTES;
  exports.crypto_scalarmult_SCALARBYTES = crypto_scalarmult_SCALARBYTES = lib.crypto_scalarmult_SCALARBYTES;
  exports.crypto_secretbox_KEYBYTES = crypto_secretbox_KEYBYTES = lib.crypto_secretbox_KEYBYTES;
  exports.crypto_secretbox_MACBYTES = crypto_secretbox_MACBYTES = lib.crypto_secretbox_MACBYTES;
  exports.crypto_secretbox_MESSAGEBYTES_MAX = crypto_secretbox_MESSAGEBYTES_MAX = lib.crypto_secretbox_MESSAGEBYTES_MAX;
  exports.crypto_secretbox_NONCEBYTES = crypto_secretbox_NONCEBYTES = lib.crypto_secretbox_NONCEBYTES;
  exports.crypto_secretstream_xchacha20poly1305_ABYTES = crypto_secretstream_xchacha20poly1305_ABYTES = lib.crypto_secretstream_xchacha20poly1305_ABYTES;
  exports.crypto_secretstream_xchacha20poly1305_HEADERBYTES = crypto_secretstream_xchacha20poly1305_HEADERBYTES = lib.crypto_secretstream_xchacha20poly1305_HEADERBYTES;
  exports.crypto_secretstream_xchacha20poly1305_KEYBYTES = crypto_secretstream_xchacha20poly1305_KEYBYTES = lib.crypto_secretstream_xchacha20poly1305_KEYBYTES;
  exports.crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX = crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX = lib.crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX;
  exports.crypto_secretstream_xchacha20poly1305_TAG_FINAL = crypto_secretstream_xchacha20poly1305_TAG_FINAL = lib.crypto_secretstream_xchacha20poly1305_TAG_FINAL;
  exports.crypto_secretstream_xchacha20poly1305_TAG_MESSAGE = crypto_secretstream_xchacha20poly1305_TAG_MESSAGE = lib.crypto_secretstream_xchacha20poly1305_TAG_MESSAGE;
  exports.crypto_secretstream_xchacha20poly1305_TAG_PUSH = crypto_secretstream_xchacha20poly1305_TAG_PUSH = lib.crypto_secretstream_xchacha20poly1305_TAG_PUSH;
  exports.crypto_secretstream_xchacha20poly1305_TAG_REKEY = crypto_secretstream_xchacha20poly1305_TAG_REKEY = lib.crypto_secretstream_xchacha20poly1305_TAG_REKEY;
  exports.crypto_shorthash_BYTES = crypto_shorthash_BYTES = lib.crypto_shorthash_BYTES;
  exports.crypto_shorthash_KEYBYTES = crypto_shorthash_KEYBYTES = lib.crypto_shorthash_KEYBYTES;
  exports.crypto_sign_BYTES = crypto_sign_BYTES = lib.crypto_sign_BYTES;
  exports.crypto_sign_MESSAGEBYTES_MAX = crypto_sign_MESSAGEBYTES_MAX = lib.crypto_sign_MESSAGEBYTES_MAX;
  exports.crypto_sign_PUBLICKEYBYTES = crypto_sign_PUBLICKEYBYTES = lib.crypto_sign_PUBLICKEYBYTES;
  exports.crypto_sign_SECRETKEYBYTES = crypto_sign_SECRETKEYBYTES = lib.crypto_sign_SECRETKEYBYTES;
  exports.crypto_sign_SEEDBYTES = crypto_sign_SEEDBYTES = lib.crypto_sign_SEEDBYTES;
  exports.SODIUM_VERSION_STRING = SODIUM_VERSION_STRING = lib.SODIUM_VERSION_STRING;
  exports.crypto_pwhash_STRPREFIX = crypto_pwhash_STRPREFIX = lib.crypto_pwhash_STRPREFIX;
  resolve(undefined);
});
exports.ready = ready;
var _default = sodium;
exports.default = _default;
let add = sodium.add;
exports.add = add;
let base64_variants = sodium.base64_variants;
exports.base64_variants = base64_variants;
let compare = sodium.compare;
exports.compare = compare;
let from_base64 = sodium.from_base64;
exports.from_base64 = from_base64;
let from_hex = sodium.from_hex;
exports.from_hex = from_hex;
let from_string = sodium.from_string;
exports.from_string = from_string;
let increment = sodium.increment;
exports.increment = increment;
let is_zero = sodium.is_zero;
// @ts-ignore
exports.is_zero = is_zero;
let libsodium = sodium.libsodium;
exports.libsodium = libsodium;
let memcmp = sodium.memcmp;
exports.memcmp = memcmp;
let memzero = sodium.memzero;
exports.memzero = memzero;
let output_formats = sodium.output_formats;
exports.output_formats = output_formats;
let pad = sodium.pad;
exports.pad = pad;
let unpad = sodium.unpad;
exports.unpad = unpad;
let symbols = sodium.symbols;
exports.symbols = symbols;
let to_base64 = sodium.to_base64;
exports.to_base64 = to_base64;
let to_hex = sodium.to_hex;
exports.to_hex = to_hex;
let to_string = sodium.to_string;
exports.to_string = to_string;
let crypto_aead_chacha20poly1305_decrypt = sodium.crypto_aead_chacha20poly1305_decrypt;
exports.crypto_aead_chacha20poly1305_decrypt = crypto_aead_chacha20poly1305_decrypt;
let crypto_aead_chacha20poly1305_decrypt_detached = sodium.crypto_aead_chacha20poly1305_decrypt_detached;
exports.crypto_aead_chacha20poly1305_decrypt_detached = crypto_aead_chacha20poly1305_decrypt_detached;
let crypto_aead_chacha20poly1305_encrypt = sodium.crypto_aead_chacha20poly1305_encrypt;
exports.crypto_aead_chacha20poly1305_encrypt = crypto_aead_chacha20poly1305_encrypt;
let crypto_aead_chacha20poly1305_encrypt_detached = sodium.crypto_aead_chacha20poly1305_encrypt_detached;
exports.crypto_aead_chacha20poly1305_encrypt_detached = crypto_aead_chacha20poly1305_encrypt_detached;
let crypto_aead_chacha20poly1305_ietf_decrypt = sodium.crypto_aead_chacha20poly1305_ietf_decrypt;
exports.crypto_aead_chacha20poly1305_ietf_decrypt = crypto_aead_chacha20poly1305_ietf_decrypt;
let crypto_aead_chacha20poly1305_ietf_decrypt_detached = sodium.crypto_aead_chacha20poly1305_ietf_decrypt_detached;
exports.crypto_aead_chacha20poly1305_ietf_decrypt_detached = crypto_aead_chacha20poly1305_ietf_decrypt_detached;
let crypto_aead_chacha20poly1305_ietf_encrypt = sodium.crypto_aead_chacha20poly1305_ietf_encrypt;
exports.crypto_aead_chacha20poly1305_ietf_encrypt = crypto_aead_chacha20poly1305_ietf_encrypt;
let crypto_aead_chacha20poly1305_ietf_encrypt_detached = sodium.crypto_aead_chacha20poly1305_ietf_encrypt_detached;
exports.crypto_aead_chacha20poly1305_ietf_encrypt_detached = crypto_aead_chacha20poly1305_ietf_encrypt_detached;
let crypto_aead_chacha20poly1305_ietf_keygen = sodium.crypto_aead_chacha20poly1305_ietf_keygen;
exports.crypto_aead_chacha20poly1305_ietf_keygen = crypto_aead_chacha20poly1305_ietf_keygen;
let crypto_aead_chacha20poly1305_keygen = sodium.crypto_aead_chacha20poly1305_keygen;
exports.crypto_aead_chacha20poly1305_keygen = crypto_aead_chacha20poly1305_keygen;
let crypto_aead_xchacha20poly1305_ietf_decrypt = sodium.crypto_aead_xchacha20poly1305_ietf_decrypt;
exports.crypto_aead_xchacha20poly1305_ietf_decrypt = crypto_aead_xchacha20poly1305_ietf_decrypt;
let crypto_aead_xchacha20poly1305_ietf_decrypt_detached = sodium.crypto_aead_xchacha20poly1305_ietf_decrypt_detached;
exports.crypto_aead_xchacha20poly1305_ietf_decrypt_detached = crypto_aead_xchacha20poly1305_ietf_decrypt_detached;
let crypto_aead_xchacha20poly1305_ietf_encrypt = sodium.crypto_aead_xchacha20poly1305_ietf_encrypt;
exports.crypto_aead_xchacha20poly1305_ietf_encrypt = crypto_aead_xchacha20poly1305_ietf_encrypt;
let crypto_aead_xchacha20poly1305_ietf_encrypt_detached = sodium.crypto_aead_xchacha20poly1305_ietf_encrypt_detached;
exports.crypto_aead_xchacha20poly1305_ietf_encrypt_detached = crypto_aead_xchacha20poly1305_ietf_encrypt_detached;
let crypto_aead_xchacha20poly1305_ietf_keygen = sodium.crypto_aead_xchacha20poly1305_ietf_keygen;
exports.crypto_aead_xchacha20poly1305_ietf_keygen = crypto_aead_xchacha20poly1305_ietf_keygen;
let crypto_auth = sodium.crypto_auth;
exports.crypto_auth = crypto_auth;
let crypto_auth_keygen = sodium.crypto_auth_keygen;
exports.crypto_auth_keygen = crypto_auth_keygen;
let crypto_auth_verify = sodium.crypto_auth_verify;
exports.crypto_auth_verify = crypto_auth_verify;
let crypto_box_beforenm = sodium.crypto_box_beforenm;
exports.crypto_box_beforenm = crypto_box_beforenm;
let crypto_box_detached = sodium.crypto_box_detached;
exports.crypto_box_detached = crypto_box_detached;
let crypto_box_easy = sodium.crypto_box_easy;
exports.crypto_box_easy = crypto_box_easy;
let crypto_box_easy_afternm = sodium.crypto_box_easy_afternm;
exports.crypto_box_easy_afternm = crypto_box_easy_afternm;
let crypto_box_keypair = sodium.crypto_box_keypair;
exports.crypto_box_keypair = crypto_box_keypair;
let crypto_box_open_detached = sodium.crypto_box_open_detached;
exports.crypto_box_open_detached = crypto_box_open_detached;
let crypto_box_open_easy = sodium.crypto_box_open_easy;
exports.crypto_box_open_easy = crypto_box_open_easy;
let crypto_box_open_easy_afternm = sodium.crypto_box_open_easy_afternm;
exports.crypto_box_open_easy_afternm = crypto_box_open_easy_afternm;
let crypto_box_seal = sodium.crypto_box_seal;
exports.crypto_box_seal = crypto_box_seal;
let crypto_box_seal_open = sodium.crypto_box_seal_open;
exports.crypto_box_seal_open = crypto_box_seal_open;
let crypto_box_seed_keypair = sodium.crypto_box_seed_keypair;
exports.crypto_box_seed_keypair = crypto_box_seed_keypair;
let crypto_generichash = sodium.crypto_generichash;
exports.crypto_generichash = crypto_generichash;
let crypto_generichash_final = sodium.crypto_generichash_final;
exports.crypto_generichash_final = crypto_generichash_final;
let crypto_generichash_init = sodium.crypto_generichash_init;
exports.crypto_generichash_init = crypto_generichash_init;
let crypto_generichash_keygen = sodium.crypto_generichash_keygen;
exports.crypto_generichash_keygen = crypto_generichash_keygen;
let crypto_generichash_update = sodium.crypto_generichash_update;
exports.crypto_generichash_update = crypto_generichash_update;
let crypto_hash = sodium.crypto_hash;
exports.crypto_hash = crypto_hash;
let crypto_kdf_derive_from_key = sodium.crypto_kdf_derive_from_key;
exports.crypto_kdf_derive_from_key = crypto_kdf_derive_from_key;
let crypto_kdf_keygen = sodium.crypto_kdf_keygen;
exports.crypto_kdf_keygen = crypto_kdf_keygen;
let crypto_kx_client_session_keys = sodium.crypto_kx_client_session_keys;
exports.crypto_kx_client_session_keys = crypto_kx_client_session_keys;
let crypto_kx_keypair = sodium.crypto_kx_keypair;
exports.crypto_kx_keypair = crypto_kx_keypair;
let crypto_kx_seed_keypair = sodium.crypto_kx_seed_keypair;
exports.crypto_kx_seed_keypair = crypto_kx_seed_keypair;
let crypto_kx_server_session_keys = sodium.crypto_kx_server_session_keys;
exports.crypto_kx_server_session_keys = crypto_kx_server_session_keys;
let crypto_pwhash = sodium.crypto_pwhash;
exports.crypto_pwhash = crypto_pwhash;
let crypto_pwhash_str = sodium.crypto_pwhash_str;
exports.crypto_pwhash_str = crypto_pwhash_str;
let crypto_pwhash_str_needs_rehash = sodium.crypto_pwhash_str_needs_rehash;
exports.crypto_pwhash_str_needs_rehash = crypto_pwhash_str_needs_rehash;
let crypto_pwhash_str_verify = sodium.crypto_pwhash_str_verify;
exports.crypto_pwhash_str_verify = crypto_pwhash_str_verify;
let crypto_scalarmult = sodium.crypto_scalarmult;
exports.crypto_scalarmult = crypto_scalarmult;
let crypto_scalarmult_base = sodium.crypto_scalarmult_base;
exports.crypto_scalarmult_base = crypto_scalarmult_base;
let crypto_secretbox_detached = sodium.crypto_secretbox_detached;
exports.crypto_secretbox_detached = crypto_secretbox_detached;
let crypto_secretbox_easy = sodium.crypto_secretbox_easy;
exports.crypto_secretbox_easy = crypto_secretbox_easy;
let crypto_secretbox_keygen = sodium.crypto_secretbox_keygen;
exports.crypto_secretbox_keygen = crypto_secretbox_keygen;
let crypto_secretbox_open_detached = sodium.crypto_secretbox_open_detached;
exports.crypto_secretbox_open_detached = crypto_secretbox_open_detached;
let crypto_secretbox_open_easy = sodium.crypto_secretbox_open_easy;
exports.crypto_secretbox_open_easy = crypto_secretbox_open_easy;
let crypto_secretstream_xchacha20poly1305_init_pull = sodium.crypto_secretstream_xchacha20poly1305_init_pull;
exports.crypto_secretstream_xchacha20poly1305_init_pull = crypto_secretstream_xchacha20poly1305_init_pull;
let crypto_secretstream_xchacha20poly1305_init_push = sodium.crypto_secretstream_xchacha20poly1305_init_push;
exports.crypto_secretstream_xchacha20poly1305_init_push = crypto_secretstream_xchacha20poly1305_init_push;
let crypto_secretstream_xchacha20poly1305_keygen = sodium.crypto_secretstream_xchacha20poly1305_keygen;
exports.crypto_secretstream_xchacha20poly1305_keygen = crypto_secretstream_xchacha20poly1305_keygen;
let crypto_secretstream_xchacha20poly1305_pull = sodium.crypto_secretstream_xchacha20poly1305_pull;
exports.crypto_secretstream_xchacha20poly1305_pull = crypto_secretstream_xchacha20poly1305_pull;
let crypto_secretstream_xchacha20poly1305_push = sodium.crypto_secretstream_xchacha20poly1305_push;
exports.crypto_secretstream_xchacha20poly1305_push = crypto_secretstream_xchacha20poly1305_push;
let crypto_secretstream_xchacha20poly1305_rekey = sodium.crypto_secretstream_xchacha20poly1305_rekey;
exports.crypto_secretstream_xchacha20poly1305_rekey = crypto_secretstream_xchacha20poly1305_rekey;
let crypto_shorthash = sodium.crypto_shorthash;
exports.crypto_shorthash = crypto_shorthash;
let crypto_shorthash_keygen = sodium.crypto_shorthash_keygen;
exports.crypto_shorthash_keygen = crypto_shorthash_keygen;
let crypto_sign = sodium.crypto_sign;
exports.crypto_sign = crypto_sign;
let crypto_sign_detached = sodium.crypto_sign_detached;
exports.crypto_sign_detached = crypto_sign_detached;
let crypto_sign_ed25519_pk_to_curve25519 = sodium.crypto_sign_ed25519_pk_to_curve25519;
exports.crypto_sign_ed25519_pk_to_curve25519 = crypto_sign_ed25519_pk_to_curve25519;
let crypto_sign_ed25519_sk_to_curve25519 = sodium.crypto_sign_ed25519_sk_to_curve25519;
exports.crypto_sign_ed25519_sk_to_curve25519 = crypto_sign_ed25519_sk_to_curve25519;
let crypto_sign_final_create = sodium.crypto_sign_final_create;
exports.crypto_sign_final_create = crypto_sign_final_create;
let crypto_sign_final_verify = sodium.crypto_sign_final_verify;
exports.crypto_sign_final_verify = crypto_sign_final_verify;
let crypto_sign_init = sodium.crypto_sign_init;
exports.crypto_sign_init = crypto_sign_init;
let crypto_sign_keypair = sodium.crypto_sign_keypair;
exports.crypto_sign_keypair = crypto_sign_keypair;
let crypto_sign_open = sodium.crypto_sign_open;
exports.crypto_sign_open = crypto_sign_open;
let crypto_sign_seed_keypair = sodium.crypto_sign_seed_keypair;
exports.crypto_sign_seed_keypair = crypto_sign_seed_keypair;
let crypto_sign_update = sodium.crypto_sign_update;
exports.crypto_sign_update = crypto_sign_update;
let crypto_sign_verify_detached = sodium.crypto_sign_verify_detached;
exports.crypto_sign_verify_detached = crypto_sign_verify_detached;
let randombytes_buf = sodium.randombytes_buf;
exports.randombytes_buf = randombytes_buf;
let randombytes_buf_deterministic = sodium.randombytes_buf_deterministic;
exports.randombytes_buf_deterministic = randombytes_buf_deterministic;
let randombytes_close = sodium.randombytes_close;
exports.randombytes_close = randombytes_close;
let randombytes_random = sodium.randombytes_random;
exports.randombytes_random = randombytes_random;
let randombytes_stir = sodium.randombytes_stir;
exports.randombytes_stir = randombytes_stir;
let randombytes_uniform = sodium.randombytes_uniform;
exports.randombytes_uniform = randombytes_uniform;
let sodium_version_string = sodium.sodium_version_string;
exports.sodium_version_string = sodium_version_string;
let SODIUM_LIBRARY_VERSION_MAJOR = sodium.SODIUM_LIBRARY_VERSION_MAJOR;
exports.SODIUM_LIBRARY_VERSION_MAJOR = SODIUM_LIBRARY_VERSION_MAJOR;
let SODIUM_LIBRARY_VERSION_MINOR = sodium.SODIUM_LIBRARY_VERSION_MINOR;
exports.SODIUM_LIBRARY_VERSION_MINOR = SODIUM_LIBRARY_VERSION_MINOR;
let crypto_aead_chacha20poly1305_ABYTES = sodium.crypto_aead_chacha20poly1305_ABYTES;
exports.crypto_aead_chacha20poly1305_ABYTES = crypto_aead_chacha20poly1305_ABYTES;
let crypto_aead_chacha20poly1305_IETF_ABYTES = sodium.crypto_aead_chacha20poly1305_IETF_ABYTES;
exports.crypto_aead_chacha20poly1305_IETF_ABYTES = crypto_aead_chacha20poly1305_IETF_ABYTES;
let crypto_aead_chacha20poly1305_IETF_KEYBYTES = sodium.crypto_aead_chacha20poly1305_IETF_KEYBYTES;
exports.crypto_aead_chacha20poly1305_IETF_KEYBYTES = crypto_aead_chacha20poly1305_IETF_KEYBYTES;
let crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX = sodium.crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX;
exports.crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX = crypto_aead_chacha20poly1305_IETF_MESSAGEBYTES_MAX;
let crypto_aead_chacha20poly1305_IETF_NPUBBYTES = sodium.crypto_aead_chacha20poly1305_IETF_NPUBBYTES;
exports.crypto_aead_chacha20poly1305_IETF_NPUBBYTES = crypto_aead_chacha20poly1305_IETF_NPUBBYTES;
let crypto_aead_chacha20poly1305_IETF_NSECBYTES = sodium.crypto_aead_chacha20poly1305_IETF_NSECBYTES;
exports.crypto_aead_chacha20poly1305_IETF_NSECBYTES = crypto_aead_chacha20poly1305_IETF_NSECBYTES;
let crypto_aead_chacha20poly1305_KEYBYTES = sodium.crypto_aead_chacha20poly1305_KEYBYTES;
exports.crypto_aead_chacha20poly1305_KEYBYTES = crypto_aead_chacha20poly1305_KEYBYTES;
let crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX = sodium.crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX;
exports.crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX = crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX;
let crypto_aead_chacha20poly1305_NPUBBYTES = sodium.crypto_aead_chacha20poly1305_NPUBBYTES;
exports.crypto_aead_chacha20poly1305_NPUBBYTES = crypto_aead_chacha20poly1305_NPUBBYTES;
let crypto_aead_chacha20poly1305_NSECBYTES = sodium.crypto_aead_chacha20poly1305_NSECBYTES;
exports.crypto_aead_chacha20poly1305_NSECBYTES = crypto_aead_chacha20poly1305_NSECBYTES;
let crypto_aead_chacha20poly1305_ietf_ABYTES = sodium.crypto_aead_chacha20poly1305_ietf_ABYTES;
exports.crypto_aead_chacha20poly1305_ietf_ABYTES = crypto_aead_chacha20poly1305_ietf_ABYTES;
let crypto_aead_chacha20poly1305_ietf_KEYBYTES = sodium.crypto_aead_chacha20poly1305_ietf_KEYBYTES;
exports.crypto_aead_chacha20poly1305_ietf_KEYBYTES = crypto_aead_chacha20poly1305_ietf_KEYBYTES;
let crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = sodium.crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX;
exports.crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX;
let crypto_aead_chacha20poly1305_ietf_NPUBBYTES = sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES;
exports.crypto_aead_chacha20poly1305_ietf_NPUBBYTES = crypto_aead_chacha20poly1305_ietf_NPUBBYTES;
let crypto_aead_chacha20poly1305_ietf_NSECBYTES = sodium.crypto_aead_chacha20poly1305_ietf_NSECBYTES;
exports.crypto_aead_chacha20poly1305_ietf_NSECBYTES = crypto_aead_chacha20poly1305_ietf_NSECBYTES;
let crypto_aead_xchacha20poly1305_IETF_ABYTES = sodium.crypto_aead_xchacha20poly1305_IETF_ABYTES;
exports.crypto_aead_xchacha20poly1305_IETF_ABYTES = crypto_aead_xchacha20poly1305_IETF_ABYTES;
let crypto_aead_xchacha20poly1305_IETF_KEYBYTES = sodium.crypto_aead_xchacha20poly1305_IETF_KEYBYTES;
exports.crypto_aead_xchacha20poly1305_IETF_KEYBYTES = crypto_aead_xchacha20poly1305_IETF_KEYBYTES;
let crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX = sodium.crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX;
exports.crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX = crypto_aead_xchacha20poly1305_IETF_MESSAGEBYTES_MAX;
let crypto_aead_xchacha20poly1305_IETF_NPUBBYTES = sodium.crypto_aead_xchacha20poly1305_IETF_NPUBBYTES;
exports.crypto_aead_xchacha20poly1305_IETF_NPUBBYTES = crypto_aead_xchacha20poly1305_IETF_NPUBBYTES;
let crypto_aead_xchacha20poly1305_IETF_NSECBYTES = sodium.crypto_aead_xchacha20poly1305_IETF_NSECBYTES;
exports.crypto_aead_xchacha20poly1305_IETF_NSECBYTES = crypto_aead_xchacha20poly1305_IETF_NSECBYTES;
let crypto_aead_xchacha20poly1305_ietf_ABYTES = sodium.crypto_aead_xchacha20poly1305_ietf_ABYTES;
exports.crypto_aead_xchacha20poly1305_ietf_ABYTES = crypto_aead_xchacha20poly1305_ietf_ABYTES;
let crypto_aead_xchacha20poly1305_ietf_KEYBYTES = sodium.crypto_aead_xchacha20poly1305_ietf_KEYBYTES;
exports.crypto_aead_xchacha20poly1305_ietf_KEYBYTES = crypto_aead_xchacha20poly1305_ietf_KEYBYTES;
let crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX = sodium.crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX;
exports.crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX = crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX;
let crypto_aead_xchacha20poly1305_ietf_NPUBBYTES = sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES;
exports.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES = crypto_aead_xchacha20poly1305_ietf_NPUBBYTES;
let crypto_aead_xchacha20poly1305_ietf_NSECBYTES = sodium.crypto_aead_xchacha20poly1305_ietf_NSECBYTES;
exports.crypto_aead_xchacha20poly1305_ietf_NSECBYTES = crypto_aead_xchacha20poly1305_ietf_NSECBYTES;
let crypto_auth_BYTES = sodium.crypto_auth_BYTES;
exports.crypto_auth_BYTES = crypto_auth_BYTES;
let crypto_auth_KEYBYTES = sodium.crypto_auth_KEYBYTES;
exports.crypto_auth_KEYBYTES = crypto_auth_KEYBYTES;
let crypto_box_BEFORENMBYTES = sodium.crypto_box_BEFORENMBYTES;
exports.crypto_box_BEFORENMBYTES = crypto_box_BEFORENMBYTES;
let crypto_box_MACBYTES = sodium.crypto_box_MACBYTES;
exports.crypto_box_MACBYTES = crypto_box_MACBYTES;
let crypto_box_MESSAGEBYTES_MAX = sodium.crypto_box_MESSAGEBYTES_MAX;
exports.crypto_box_MESSAGEBYTES_MAX = crypto_box_MESSAGEBYTES_MAX;
let crypto_box_NONCEBYTES = sodium.crypto_box_NONCEBYTES;
exports.crypto_box_NONCEBYTES = crypto_box_NONCEBYTES;
let crypto_box_PUBLICKEYBYTES = sodium.crypto_box_PUBLICKEYBYTES;
exports.crypto_box_PUBLICKEYBYTES = crypto_box_PUBLICKEYBYTES;
let crypto_box_SEALBYTES = sodium.crypto_box_SEALBYTES;
exports.crypto_box_SEALBYTES = crypto_box_SEALBYTES;
let crypto_box_SECRETKEYBYTES = sodium.crypto_box_SECRETKEYBYTES;
exports.crypto_box_SECRETKEYBYTES = crypto_box_SECRETKEYBYTES;
let crypto_box_SEEDBYTES = sodium.crypto_box_SEEDBYTES;
exports.crypto_box_SEEDBYTES = crypto_box_SEEDBYTES;
let crypto_generichash_BYTES = sodium.crypto_generichash_BYTES;
exports.crypto_generichash_BYTES = crypto_generichash_BYTES;
let crypto_generichash_BYTES_MAX = sodium.crypto_generichash_BYTES_MAX;
exports.crypto_generichash_BYTES_MAX = crypto_generichash_BYTES_MAX;
let crypto_generichash_BYTES_MIN = sodium.crypto_generichash_BYTES_MIN;
exports.crypto_generichash_BYTES_MIN = crypto_generichash_BYTES_MIN;
let crypto_generichash_KEYBYTES = sodium.crypto_generichash_KEYBYTES;
exports.crypto_generichash_KEYBYTES = crypto_generichash_KEYBYTES;
let crypto_generichash_KEYBYTES_MAX = sodium.crypto_generichash_KEYBYTES_MAX;
exports.crypto_generichash_KEYBYTES_MAX = crypto_generichash_KEYBYTES_MAX;
let crypto_generichash_KEYBYTES_MIN = sodium.crypto_generichash_KEYBYTES_MIN;
exports.crypto_generichash_KEYBYTES_MIN = crypto_generichash_KEYBYTES_MIN;
let crypto_hash_BYTES = sodium.crypto_hash_BYTES;
exports.crypto_hash_BYTES = crypto_hash_BYTES;
let crypto_kdf_BYTES_MAX = sodium.crypto_kdf_BYTES_MAX;
exports.crypto_kdf_BYTES_MAX = crypto_kdf_BYTES_MAX;
let crypto_kdf_BYTES_MIN = sodium.crypto_kdf_BYTES_MIN;
exports.crypto_kdf_BYTES_MIN = crypto_kdf_BYTES_MIN;
let crypto_kdf_CONTEXTBYTES = sodium.crypto_kdf_CONTEXTBYTES;
exports.crypto_kdf_CONTEXTBYTES = crypto_kdf_CONTEXTBYTES;
let crypto_kdf_KEYBYTES = sodium.crypto_kdf_KEYBYTES;
exports.crypto_kdf_KEYBYTES = crypto_kdf_KEYBYTES;
let crypto_kx_PUBLICKEYBYTES = sodium.crypto_kx_PUBLICKEYBYTES;
exports.crypto_kx_PUBLICKEYBYTES = crypto_kx_PUBLICKEYBYTES;
let crypto_kx_SECRETKEYBYTES = sodium.crypto_kx_SECRETKEYBYTES;
exports.crypto_kx_SECRETKEYBYTES = crypto_kx_SECRETKEYBYTES;
let crypto_kx_SEEDBYTES = sodium.crypto_kx_SEEDBYTES;
exports.crypto_kx_SEEDBYTES = crypto_kx_SEEDBYTES;
let crypto_kx_SESSIONKEYBYTES = sodium.crypto_kx_SESSIONKEYBYTES;
exports.crypto_kx_SESSIONKEYBYTES = crypto_kx_SESSIONKEYBYTES;
let crypto_pwhash_ALG_ARGON2I13 = sodium.crypto_pwhash_ALG_ARGON2I13;
exports.crypto_pwhash_ALG_ARGON2I13 = crypto_pwhash_ALG_ARGON2I13;
let crypto_pwhash_ALG_ARGON2ID13 = sodium.crypto_pwhash_ALG_ARGON2ID13;
exports.crypto_pwhash_ALG_ARGON2ID13 = crypto_pwhash_ALG_ARGON2ID13;
let crypto_pwhash_ALG_DEFAULT = sodium.crypto_pwhash_ALG_DEFAULT;
exports.crypto_pwhash_ALG_DEFAULT = crypto_pwhash_ALG_DEFAULT;
let crypto_pwhash_BYTES_MAX = sodium.crypto_pwhash_BYTES_MAX;
exports.crypto_pwhash_BYTES_MAX = crypto_pwhash_BYTES_MAX;
let crypto_pwhash_BYTES_MIN = sodium.crypto_pwhash_BYTES_MIN;
exports.crypto_pwhash_BYTES_MIN = crypto_pwhash_BYTES_MIN;
let crypto_pwhash_MEMLIMIT_INTERACTIVE = sodium.crypto_pwhash_MEMLIMIT_INTERACTIVE;
exports.crypto_pwhash_MEMLIMIT_INTERACTIVE = crypto_pwhash_MEMLIMIT_INTERACTIVE;
let crypto_pwhash_MEMLIMIT_MAX = sodium.crypto_pwhash_MEMLIMIT_MAX;
exports.crypto_pwhash_MEMLIMIT_MAX = crypto_pwhash_MEMLIMIT_MAX;
let crypto_pwhash_MEMLIMIT_MIN = sodium.crypto_pwhash_MEMLIMIT_MIN;
exports.crypto_pwhash_MEMLIMIT_MIN = crypto_pwhash_MEMLIMIT_MIN;
let crypto_pwhash_MEMLIMIT_MODERATE = sodium.crypto_pwhash_MEMLIMIT_MODERATE;
exports.crypto_pwhash_MEMLIMIT_MODERATE = crypto_pwhash_MEMLIMIT_MODERATE;
let crypto_pwhash_MEMLIMIT_SENSITIVE = sodium.crypto_pwhash_MEMLIMIT_SENSITIVE;
exports.crypto_pwhash_MEMLIMIT_SENSITIVE = crypto_pwhash_MEMLIMIT_SENSITIVE;
let crypto_pwhash_OPSLIMIT_INTERACTIVE = sodium.crypto_pwhash_OPSLIMIT_INTERACTIVE;
exports.crypto_pwhash_OPSLIMIT_INTERACTIVE = crypto_pwhash_OPSLIMIT_INTERACTIVE;
let crypto_pwhash_OPSLIMIT_MAX = sodium.crypto_pwhash_OPSLIMIT_MAX;
exports.crypto_pwhash_OPSLIMIT_MAX = crypto_pwhash_OPSLIMIT_MAX;
let crypto_pwhash_OPSLIMIT_MIN = sodium.crypto_pwhash_OPSLIMIT_MIN;
exports.crypto_pwhash_OPSLIMIT_MIN = crypto_pwhash_OPSLIMIT_MIN;
let crypto_pwhash_OPSLIMIT_MODERATE = sodium.crypto_pwhash_OPSLIMIT_MODERATE;
exports.crypto_pwhash_OPSLIMIT_MODERATE = crypto_pwhash_OPSLIMIT_MODERATE;
let crypto_pwhash_OPSLIMIT_SENSITIVE = sodium.crypto_pwhash_OPSLIMIT_SENSITIVE;
exports.crypto_pwhash_OPSLIMIT_SENSITIVE = crypto_pwhash_OPSLIMIT_SENSITIVE;
let crypto_pwhash_PASSWD_MAX = sodium.crypto_pwhash_PASSWD_MAX;
exports.crypto_pwhash_PASSWD_MAX = crypto_pwhash_PASSWD_MAX;
let crypto_pwhash_PASSWD_MIN = sodium.crypto_pwhash_PASSWD_MIN;
exports.crypto_pwhash_PASSWD_MIN = crypto_pwhash_PASSWD_MIN;
let crypto_pwhash_SALTBYTES = sodium.crypto_pwhash_SALTBYTES;
exports.crypto_pwhash_SALTBYTES = crypto_pwhash_SALTBYTES;
let crypto_pwhash_STRBYTES = sodium.crypto_pwhash_STRBYTES;
exports.crypto_pwhash_STRBYTES = crypto_pwhash_STRBYTES;
let crypto_scalarmult_BYTES = sodium.crypto_scalarmult_BYTES;
exports.crypto_scalarmult_BYTES = crypto_scalarmult_BYTES;
let crypto_scalarmult_SCALARBYTES = sodium.crypto_scalarmult_SCALARBYTES;
exports.crypto_scalarmult_SCALARBYTES = crypto_scalarmult_SCALARBYTES;
let crypto_secretbox_KEYBYTES = sodium.crypto_secretbox_KEYBYTES;
exports.crypto_secretbox_KEYBYTES = crypto_secretbox_KEYBYTES;
let crypto_secretbox_MACBYTES = sodium.crypto_secretbox_MACBYTES;
exports.crypto_secretbox_MACBYTES = crypto_secretbox_MACBYTES;
let crypto_secretbox_MESSAGEBYTES_MAX = sodium.crypto_secretbox_MESSAGEBYTES_MAX;
exports.crypto_secretbox_MESSAGEBYTES_MAX = crypto_secretbox_MESSAGEBYTES_MAX;
let crypto_secretbox_NONCEBYTES = sodium.crypto_secretbox_NONCEBYTES;
exports.crypto_secretbox_NONCEBYTES = crypto_secretbox_NONCEBYTES;
let crypto_secretstream_xchacha20poly1305_ABYTES = sodium.crypto_secretstream_xchacha20poly1305_ABYTES;
exports.crypto_secretstream_xchacha20poly1305_ABYTES = crypto_secretstream_xchacha20poly1305_ABYTES;
let crypto_secretstream_xchacha20poly1305_HEADERBYTES = sodium.crypto_secretstream_xchacha20poly1305_HEADERBYTES;
exports.crypto_secretstream_xchacha20poly1305_HEADERBYTES = crypto_secretstream_xchacha20poly1305_HEADERBYTES;
let crypto_secretstream_xchacha20poly1305_KEYBYTES = sodium.crypto_secretstream_xchacha20poly1305_KEYBYTES;
exports.crypto_secretstream_xchacha20poly1305_KEYBYTES = crypto_secretstream_xchacha20poly1305_KEYBYTES;
let crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX = sodium.crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX;
exports.crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX = crypto_secretstream_xchacha20poly1305_MESSAGEBYTES_MAX;
let crypto_secretstream_xchacha20poly1305_TAG_FINAL = sodium.crypto_secretstream_xchacha20poly1305_TAG_FINAL;
exports.crypto_secretstream_xchacha20poly1305_TAG_FINAL = crypto_secretstream_xchacha20poly1305_TAG_FINAL;
let crypto_secretstream_xchacha20poly1305_TAG_MESSAGE = sodium.crypto_secretstream_xchacha20poly1305_TAG_MESSAGE;
exports.crypto_secretstream_xchacha20poly1305_TAG_MESSAGE = crypto_secretstream_xchacha20poly1305_TAG_MESSAGE;
let crypto_secretstream_xchacha20poly1305_TAG_PUSH = sodium.crypto_secretstream_xchacha20poly1305_TAG_PUSH;
exports.crypto_secretstream_xchacha20poly1305_TAG_PUSH = crypto_secretstream_xchacha20poly1305_TAG_PUSH;
let crypto_secretstream_xchacha20poly1305_TAG_REKEY = sodium.crypto_secretstream_xchacha20poly1305_TAG_REKEY;
exports.crypto_secretstream_xchacha20poly1305_TAG_REKEY = crypto_secretstream_xchacha20poly1305_TAG_REKEY;
let crypto_shorthash_BYTES = sodium.crypto_shorthash_BYTES;
exports.crypto_shorthash_BYTES = crypto_shorthash_BYTES;
let crypto_shorthash_KEYBYTES = sodium.crypto_shorthash_KEYBYTES;
exports.crypto_shorthash_KEYBYTES = crypto_shorthash_KEYBYTES;
let crypto_sign_BYTES = sodium.crypto_sign_BYTES;
exports.crypto_sign_BYTES = crypto_sign_BYTES;
let crypto_sign_MESSAGEBYTES_MAX = sodium.crypto_sign_MESSAGEBYTES_MAX;
exports.crypto_sign_MESSAGEBYTES_MAX = crypto_sign_MESSAGEBYTES_MAX;
let crypto_sign_PUBLICKEYBYTES = sodium.crypto_sign_PUBLICKEYBYTES;
exports.crypto_sign_PUBLICKEYBYTES = crypto_sign_PUBLICKEYBYTES;
let crypto_sign_SECRETKEYBYTES = sodium.crypto_sign_SECRETKEYBYTES;
exports.crypto_sign_SECRETKEYBYTES = crypto_sign_SECRETKEYBYTES;
let crypto_sign_SEEDBYTES = sodium.crypto_sign_SEEDBYTES;
exports.crypto_sign_SEEDBYTES = crypto_sign_SEEDBYTES;
let SODIUM_VERSION_STRING = sodium.SODIUM_VERSION_STRING;
exports.SODIUM_VERSION_STRING = SODIUM_VERSION_STRING;
let crypto_pwhash_STRPREFIX = sodium.crypto_pwhash_STRPREFIX;
exports.crypto_pwhash_STRPREFIX = crypto_pwhash_STRPREFIX;
let _unstable_crypto_kdf_hkdf_sha256_BYTES_MAX = 8160;
exports._unstable_crypto_kdf_hkdf_sha256_BYTES_MAX = _unstable_crypto_kdf_hkdf_sha256_BYTES_MAX;
let _unstable_crypto_kdf_hkdf_sha256_BYTES_MIN = 0;
exports._unstable_crypto_kdf_hkdf_sha256_BYTES_MIN = _unstable_crypto_kdf_hkdf_sha256_BYTES_MIN;
let _unstable_crypto_kdf_hkdf_sha256_KEYBYTES = 32;
exports._unstable_crypto_kdf_hkdf_sha256_KEYBYTES = _unstable_crypto_kdf_hkdf_sha256_KEYBYTES;
let _unstable_crypto_kdf_hkdf_sha256_extract = (key, salt) => {
  return hkdf.extract(_sha.sha256, key, salt);
};
exports._unstable_crypto_kdf_hkdf_sha256_extract = _unstable_crypto_kdf_hkdf_sha256_extract;
let _unstable_crypto_kdf_hkdf_sha256_expand = (key, info, length) => {
  return hkdf.expand(_sha.sha256, key, info, length);
};
exports._unstable_crypto_kdf_hkdf_sha256_expand = _unstable_crypto_kdf_hkdf_sha256_expand;
//# sourceMappingURL=lib.js.map